<!-- views/session-detail.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <style>
      .message-form {
        position: sticky;
        bottom: 0;
        background-color: #f8f9fa;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 0.25rem 0.25rem;
      }
      .message-log {
        max-height: 400px;
        overflow-y: auto;
      }
      .message {
        padding: 0.5rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 0.5rem;
        max-width: 80%;
      }
      .message-received {
        background-color: #f1f0f0;
        align-self: flex-start;
      }
      .message-sent {
        background-color: #d1f7c4;
        align-self: flex-end;
      }
      .online-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
      }
      .online {
        background-color: #28a745;
      }
      .offline {
        background-color: #dc3545;
      }
      .tab-content {
        padding-top: 1rem;
      }

      #sessionTabs .nav-link {
        color: #333 !important;
      }
    </style>
  </head>
  <body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/">WA Gateway</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link" href="/">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/documentation">API Docs</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/settings">Settings</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <div class="container py-4">
      <div class="row">
        <div class="col-md-12">
          <div class="d-flex justify-content-between align-items-center mb-4">
            <div>
              <h1 id="session-title"><%= sessionId %></h1>
              <div id="session-status"></div>
              <!-- <img id="qrCode" src="#" alt="QR Code" /> -->
            </div>
            <a href="/" class="btn btn-outline-secondary">
              <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
          </div>
        </div>
        <div class="col-md-12">
          <ul class="nav nav-tabs" id="sessionTabs" role="tablist">
            <li class="nav-item" role="presentation">
              <button
                class="nav-link active"
                id="test-tab"
                data-bs-toggle="tab"
                data-bs-target="#test"
                type="button"
                role="tab"
              >
                <i class="bi bi-send"></i> Send Message
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button
                class="nav-link"
                id="logs-tab"
                data-bs-toggle="tab"
                data-bs-target="#logs"
                type="button"
                role="tab"
              >
                <i class="bi bi-list-ul"></i> Activity Logs
              </button>
            </li>
            <li class="nav-item" role="presentation">
              <button
                class="nav-link"
                id="settings-tab"
                data-bs-toggle="tab"
                data-bs-target="#settings"
                type="button"
                role="tab"
              >
                <i class="bi bi-gear"></i> Session Settings
              </button>
            </li>
          </ul>

          <div
            class="tab-content bg-white p-3 rounded border border-top-0 shadow-sm"
            id="sessionTabsContent"
          >
            <!-- Test Message Tab -->
            <div class="tab-pane fade show active" id="test" role="tabpanel">
              <div class="row">
                <div class="col-12">
                  <!-- <h3 class="mt-2 mb-4">Send a Messages</h3> -->
                </div>
                <div class="col-md-5">
                  <!-- Nav tabs -->
                  <ul
                    class="nav nav-pills nav-justified p-1 border bg-light rounded"
                    id="myTab"
                    role="tablist"
                  >
                    <li class="nav-item" role="presentation">
                      <button
                        class="nav-link active"
                        id="home-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#home"
                        type="button"
                        role="tab"
                        aria-controls="home"
                        aria-selected="true"
                      >
                        <i class="bi bi-card-text"></i>
                        Text
                      </button>
                    </li>
                    <li class="nav-item" role="presentation">
                      <button
                        class="nav-link"
                        id="messages-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#messages"
                        type="button"
                        role="tab"
                        aria-controls="messages"
                        aria-selected="false"
                      >
                        <i class="bi bi-images"></i>
                        Media
                      </button>
                    </li>
                    <li class="nav-item" role="presentation">
                      <button
                        class="nav-link"
                        id="profile-tab"
                        data-bs-toggle="tab"
                        data-bs-target="#profile"
                        type="button"
                        role="tab"
                        aria-controls="profile"
                        aria-selected="false"
                      >
                        <i class="bi bi-clock-history"></i>
                        Schedule
                      </button>
                    </li>
                  </ul>
                </div>

                <div class="col-md-12">
                  <!-- Tab panes -->
                  <div class="tab-content">
                    <div
                      class="tab-pane active"
                      id="home"
                      role="tabpanel"
                      aria-labelledby="home-tab"
                    >
                      <div class="row">
                        <div class="col-md-5">
                          <div class="card">
                            <div class="card-header">
                              <h5 class="card-title m-0">Send Test Message</h5>
                            </div>
                            <div class="card-body">
                              <form id="message-form">
                                <div class="mb-3">
                                  <label for="phone" class="form-label">Phone Number</label>
                                  <div class="input-group">
                                    <span class="input-group-text">+</span>
                                    <input
                                      type="tel"
                                      class="form-control"
                                      id="phone"
                                      placeholder="e.g. 628123456789"
                                      required
                                    />
                                  </div>
                                  <small class="form-text text-muted">
                                    Enter the number with country code without + or spaces.
                                  </small>
                                </div>
                                <div class="mb-3">
                                  <label for="message" class="form-label">Message</label>
                                  <textarea
                                    class="form-control"
                                    id="message"
                                    rows="4"
                                    placeholder="Type your message here..."
                                    required
                                  ></textarea>
                                </div>
                                <div class="d-grid">
                                  <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-send"></i> Send Message
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                        <div class="col-md-7">
                          <div class="card">
                            <div class="card-header">
                              <h5 class="card-title m-0">Message Preview</h5>
                            </div>
                            <div class="card-body">
                              <div class="mb-2" id="preview-recipient">
                                <strong>To:</strong> <span id="preview-to">-</span>
                              </div>
                              <div class="p-3 bg-light rounded" id="preview-content">
                                <em class="text-muted">Your message will appear here...</em>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      class="tab-pane"
                      id="messages"
                      role="tabpanel"
                      aria-labelledby="messages-tab"
                    >
                      <div class="row">
                        <div class="col-md-5">
                          <div class="card">
                            <div class="card-header">
                              <h5 class="card-title m-0">Send Media</h5>
                            </div>
                            <div class="card-body">
                              <form id="media-form">
                                <div class="mb-3">
                                  <label for="media-phone" class="form-label">Phone Number</label>
                                  <div class="input-group">
                                    <span class="input-group-text">+</span>
                                    <input
                                      type="tel"
                                      class="form-control"
                                      id="media-phone"
                                      placeholder="e.g. 628123456789"
                                      required
                                    />
                                  </div>
                                </div>
                                <div class="mb-3">
                                  <label for="media-type" class="form-label">Media Type</label>
                                  <select class="form-select" id="media-type" required>
                                    <option value="">Select media type</option>
                                    <option value="image">Image</option>
                                    <option value="video">Video</option>
                                    <option value="document">Document</option>
                                  </select>
                                </div>
                                <div class="mb-3">
                                  <label for="media-url" class="form-label">Media URL</label>
                                  <input
                                    type="url"
                                    class="form-control"
                                    id="media-url"
                                    placeholder="https://example.com/image.jpg"
                                    required
                                  />
                                </div>
                                <div class="mb-3">
                                  <label for="media-caption" class="form-label"
                                    >Caption (optional)</label
                                  >
                                  <textarea
                                    class="form-control"
                                    id="media-caption"
                                    rows="2"
                                    placeholder="Add a caption..."
                                  ></textarea>
                                </div>
                                <div class="d-grid">
                                  <button type="submit" class="btn btn-primary">
                                    <i class="bi bi-file-earmark-image"></i> Send Media
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                    <div
                      class="tab-pane"
                      id="profile"
                      role="tabpanel"
                      aria-labelledby="profile-tab"
                    >
                      <!-- Schedule Message -->
                      <div class="row">
                        <div class="col-md-5">
                          <div class="card">
                            <div class="card-header pb-0 border-bottom-0">
                              <!-- Nav tabs -->
                              <ul
                                class="nav nav-tabs nav-fill nav-justified"
                                id="schedule-tabs"
                                role="tablist"
                              >
                                <li class="nav-item" role="presentation">
                                  <button
                                    class="nav-link active"
                                    id="schedule-single-tab"
                                    data-bs-toggle="tab"
                                    data-bs-target="#schedule-single"
                                    type="button"
                                    role="tab"
                                    aria-controls="home"
                                    aria-selected="true"
                                  >
                                    Schedule Message
                                  </button>
                                </li>
                                <li class="nav-item" role="presentation">
                                  <button
                                    class="nav-link"
                                    id="schedule-bulk-tab"
                                    data-bs-toggle="tab"
                                    data-bs-target="#schedule-bulk"
                                    type="button"
                                    role="tab"
                                    aria-controls="profile"
                                    aria-selected="false"
                                  >
                                    Schedule Bulk
                                  </button>
                                </li>
                              </ul>
                            </div>
                            <!-- Tab panes -->
                            <div class="tab-content">
                              <div
                                class="tab-pane active"
                                id="schedule-single"
                                role="tabpanel"
                                aria-labelledby="home-tab"
                              >
                                <div class="card-body">
                                  <form id="schedule-form">
                                    <div class="mb-3">
                                      <label for="schedule-phone" class="form-label"
                                        >Phone Number</label
                                      >
                                      <div class="input-group">
                                        <span class="input-group-text">+</span>
                                        <input
                                          type="tel"
                                          class="form-control"
                                          id="schedule-phone"
                                          placeholder="e.g. 628123456789"
                                          required
                                        />
                                      </div>
                                    </div>
                                    <div class="mb-3">
                                      <label for="schedule-message" class="form-label"
                                        >Message</label
                                      >
                                      <textarea
                                        class="form-control"
                                        id="schedule-message"
                                        rows="3"
                                        placeholder="Type your message here..."
                                        required
                                      ></textarea>
                                    </div>
                                    <div class="mb-3">
                                      <label for="scheduled-time" class="form-label"
                                        >Scheduled Time</label
                                      >
                                      <input
                                        type="datetime-local"
                                        class="form-control"
                                        id="scheduled-time"
                                        required
                                      />
                                    </div>

                                    <div class="d-grid">
                                      <button type="submit" class="btn btn-primary">
                                        <i class="bi bi-calendar-plus"></i> Schedule Message
                                      </button>
                                    </div>
                                  </form>
                                </div>
                                <!-- Recurring -->
                                <div id="recurringSchedule" class="card-body">
                                  <div class="form-check form-switch mb-3">
                                    <input
                                      class="form-check-input"
                                      type="checkbox"
                                      id="isRecurring"
                                      name="isRecurring"
                                    />
                                    <label class="form-check-label" for="isRecurring"
                                      >Set as recurring message</label
                                    >
                                  </div>

                                  <div
                                    id="recurringOptions"
                                    class="p-3 bg-light rounded mb-4 d-none"
                                  >
                                    <div class="mb-1">
                                      <label class="block text-gray-700 mb-2">Recurring Type</label>
                                      <div class="flex flex-col space-y-2">
                                        <label class="inline-flex items-center">
                                          <input
                                            type="radio"
                                            name="recurringType"
                                            value="daily"
                                            checked
                                            class="mr-2"
                                          />
                                          <span>Daily (send every day at the scheduled time)</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input
                                            type="radio"
                                            name="recurringType"
                                            value="weekly"
                                            class="mr-2"
                                          />
                                          <span>Weekly (send every week on the same day)</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input
                                            type="radio"
                                            name="recurringType"
                                            value="monthly"
                                            class="mr-2"
                                          />
                                          <span>Monthly (send every month on the same day)</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input
                                            type="radio"
                                            name="recurringType"
                                            value="custom"
                                            class="mr-2"
                                          />
                                          <span>Custom (select specific days)</span>
                                        </label>
                                      </div>
                                    </div>

                                    <div id="customDaysSelection" class="ps-3 mb-3 d-none">
                                      <label class="block text-gray-700 mb-2">Select Days</label>
                                      <div class="grid grid-cols-2 gap-2">
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-monday" class="mr-2" />
                                          <span>Monday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-tuesday" class="mr-2" />
                                          <span>Tuesday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input
                                            type="checkbox"
                                            name="day-wednesday"
                                            class="mr-2"
                                          />
                                          <span>Wednesday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-thursday" class="mr-2" />
                                          <span>Thursday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-friday" class="mr-2" />
                                          <span>Friday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-saturday" class="mr-2" />
                                          <span>Saturday</span>
                                        </label>
                                        <label class="inline-flex items-center">
                                          <input type="checkbox" name="day-sunday" class="mr-2" />
                                          <span>Sunday</span>
                                        </label>
                                      </div>
                                    </div>

                                    <div class="mb-3">
                                      <label class="block text-gray-700 mb-2" for="endDate"
                                        >End Date (Optional)</label
                                      >
                                      <input
                                        type="date"
                                        id="endDate"
                                        name="endDate"
                                        class="w-full px-3 py-1 border rounded"
                                      />
                                      <p class="text-sm text-gray-500 mt-1">
                                        Leave empty for indefinite recurring
                                      </p>
                                    </div>
                                  </div>
                                </div>
                                <!-- / -->
                              </div>
                              <div
                                class="tab-pane"
                                id="schedule-bulk"
                                role="tabpanel"
                                aria-labelledby="schedule-bulk-tab"
                              >
                                <div class="card-body">
                                  <form
                                    id="bulkMessageForm"
                                    action="/session/<%= sessionId %>/bulk-message"
                                    method="post"
                                  >
                                    <div class="mb-1">
                                      <label for="excelFile" class="form-label"
                                        >Upload Excel File</label
                                      >
                                      <input
                                        class="form-control"
                                        type="file"
                                        id="excelFile"
                                        accept=".xlsx,.xls"
                                      />
                                      <small class="text-muted"
                                        >Required columns: to, name. Optional: message,
                                        scheduledTime</small
                                      >
                                    </div>

                                    <div class="mb-1">
                                      <label for="template" class="form-label"
                                        >Message Template</label
                                      >
                                      <textarea
                                        name="template"
                                        id="template"
                                        class="form-control"
                                        rows="4"
                                        placeholder="Hello {{ name }}, this is your notification..."
                                      ></textarea>
                                      <small class="text-muted" id="parameters-info"></small>
                                    </div>

                                    <div class="mb-1">
                                      <label class="form-label mb-0 control-label"
                                        >Time Settings</label
                                      >
                                      <div class="row g-1">
                                        <div class="col-md-3 col-6">
                                          <label for="minHour" class="form-label">Start Hour</label>
                                          <input
                                            type="number"
                                            id="minHour"
                                            name="timeConfig[minHour]"
                                            class="form-control"
                                            min="0"
                                            max="23"
                                            value="9"
                                          />
                                        </div>
                                        <div class="col-md-3 col-6">
                                          <label for="maxHour" class="form-label">End Hour</label>
                                          <input
                                            type="number"
                                            id="maxHour"
                                            name="timeConfig[maxHour]"
                                            class="form-control"
                                            min="0"
                                            max="23"
                                            value="17"
                                          />
                                        </div>
                                        <div class="col-md-3 col-6">
                                          <label for="minMinute" class="form-label"
                                            >Start Minute</label
                                          >
                                          <input
                                            type="number"
                                            id="minMinute"
                                            name="timeConfig[minMinute]"
                                            class="form-control"
                                            min="0"
                                            max="59"
                                            value="0"
                                          />
                                        </div>
                                        <div class="col-md-3 col-6">
                                          <label for="maxMinute" class="form-label"
                                            >End Minute</label
                                          >
                                          <input
                                            type="number"
                                            id="maxMinute"
                                            name="timeConfig[maxMinute]"
                                            class="form-control"
                                            min="0"
                                            max="59"
                                            value="59"
                                          />
                                        </div>
                                      </div>
                                    </div>

                                    <!-- Hidden field for JSON data -->
                                    <input type="hidden" name="datajson" id="datajson" />

                                    <div class="mb-1">
                                      <div
                                        class="alert alert-info"
                                        id="uploadInfo"
                                        style="display: none"
                                      >
                                        <span id="fileDetails"></span>
                                      </div>
                                      <div
                                        class="alert alert-danger"
                                        id="errorInfo"
                                        style="display: none"
                                      ></div>
                                    </div>

                                    <div class="mt-2">
                                      <button
                                        type="submit"
                                        class="btn btn-primary"
                                        id="submitBtn"
                                        disabled
                                      >
                                        Schedule Messages
                                      </button>
                                      <button
                                        type="button"
                                        class="btn btn-secondary"
                                        onclick="resetForm()"
                                      >
                                        Reset
                                      </button>
                                    </div>
                                  </form>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                        <div class="col-md-7">
                          <!-- Preview section -->
                          <div class="card mb-4" id="previewCard" style="display: none">
                            <div class="card-header">
                              <h4>Data Preview</h4>
                            </div>
                            <div class="card-body">
                              <div class="table-responsive">
                                <table class="table table-striped" id="previewTable">
                                  <thead>
                                    <tr>
                                      <th>#</th>
                                      <th>To</th>
                                      <th>Name</th>
                                      <th>Message Preview</th>
                                      <th>Scheduled Time</th>
                                    </tr>
                                  </thead>
                                  <tbody id="previewBody">
                                    <!-- Preview rows will be inserted here -->
                                  </tbody>
                                </table>
                              </div>
                              <p><small>Showing up to 10 preview rows.</small></p>
                            </div>
                          </div>
                          <div class="card">
                            <div
                              class="card-header d-flex justify-content-between align-items-center"
                            >
                              <h5 class="card-title m-0">Scheduled Messages</h5>
                              <button
                                class="btn btn-sm btn-outline-secondary"
                                id="refresh-scheduled"
                              >
                                <i class="bi bi-arrow-repeat"></i> Refresh
                              </button>
                            </div>
                            <div class="card-body">
                              <table class="table table-striped">
                                <thead>
                                  <tr>
                                    <th scope="col">Recipient</th>
                                    <th scope="col">Message</th>
                                    <th scope="col">Scheduled Time</th>
                                    <th scope="col">Actions</th>
                                  </tr>
                                </thead>
                                <tbody id="scheduled-messages">
                                  <!-- Dinamis: Isi list pesan terjadwal -->
                                </tbody>
                              </table>
                            </div>
                          </div>
                        </div>
                      </div>
                      <script>
                        // Load XLSX from CDN if not already included
                        if (typeof XLSX === "undefined") {
                          const script = document.createElement("script");
                          script.src =
                            "https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js";
                          document.head.appendChild(script);
                        }

                        let excelData = [];

                        function excelToJson(file) {
                          return new Promise((resolve, reject) => {
                            const reader = new FileReader();
                            reader.readAsBinaryString(file);

                            reader.onload = (event) => {
                              try {
                                const data = event.target.result;
                                const workbook = XLSX.read(data, { type: "binary" });
                                const sheetName = workbook.SheetNames[0];
                                const sheet = workbook.Sheets[sheetName];
                                const json = XLSX.utils.sheet_to_json(sheet);

                                resolve(json);
                              } catch (error) {
                                reject(error);
                              }
                            };

                            reader.onerror = (error) => reject(error);
                          });
                        }

                        function validateExcelData(data) {
                          if (!Array.isArray(data) || data.length === 0) {
                            return {
                              isValid: false,
                              errors: ["Excel file is empty or has no valid data"],
                            };
                          }

                          const firstRow = data[0];
                          const errors = [];

                          // Check required columns
                          const hasToColumn =
                            "to" in firstRow ||
                            "phone" in firstRow ||
                            "number" in firstRow ||
                            "no" in firstRow;
                          const hasNameColumn = "name" in firstRow || "nama" in firstRow;

                          if (!hasToColumn) {
                            errors.push(
                              "Missing required 'to' column (alternatives: 'phone', 'number', 'no')"
                            );
                          }

                          if (!hasNameColumn) {
                            errors.push("Missing required 'name' column (alternative: 'nama')");
                          }

                          return {
                            isValid: errors.length === 0,
                            errors: errors,
                          };
                        }

                        function renderTemplate(template, data) {
                          return template.replace(/{{\s*(\w+)\s*}}/g, (match, key) => {
                            return data[key] !== undefined ? data[key] : match;
                          });
                        }

                        function getRandomTime(
                          minHour = 0,
                          maxHour = 23,
                          minMinute = 0,
                          maxMinute = 59,
                          minSecond = 0,
                          maxSecond = 59,
                          minFutureMinutes = 3
                        ) {
                          // Get current time
                          const now = new Date();

                          // Calculate minimum allowed time (current time + minFutureMinutes minutes)
                          const minTime = new Date(now.getTime() + minFutureMinutes * 60000);

                          // Extract minimum required hours, minutes, seconds from minTime
                          const minTimeHour = minTime.getHours();
                          const minTimeMinute = minTime.getMinutes();
                          const minTimeSecond = minTime.getSeconds();

                          // Validate input ranges
                          minHour = Math.max(0, Math.min(23, minHour));
                          maxHour = Math.max(0, Math.min(23, maxHour));
                          minMinute = Math.max(0, Math.min(59, minMinute));
                          maxMinute = Math.max(0, Math.min(59, maxMinute));
                          minSecond = Math.max(0, Math.min(59, minSecond));
                          maxSecond = Math.max(0, Math.min(59, maxSecond));

                          // Ensure min is not greater than max
                          if (minHour > maxHour) [minHour, maxHour] = [maxHour, minHour];
                          if (minMinute > maxMinute)
                            [minMinute, maxMinute] = [maxMinute, minMinute];
                          if (minSecond > maxSecond)
                            [minSecond, maxSecond] = [maxSecond, minSecond];

                          // Adjust min values to ensure we're not below the current time + offset
                          if (minTimeHour > minHour) {
                            minHour = minTimeHour;
                          } else if (minTimeHour === minHour) {
                            if (minTimeMinute > minMinute) {
                              minMinute = minTimeMinute;
                            } else if (minTimeMinute === minMinute) {
                              if (minTimeSecond > minSecond) {
                                minSecond = minTimeSecond;
                              }
                            }
                          }

                          // If min values are now greater than max values, adjust max values
                          if (minHour > maxHour) {
                            // Can't satisfy both constraints, so prioritize the future time requirement
                            maxHour = Math.min(23, minHour);
                          }
                          if (minHour === maxHour && minMinute > maxMinute) {
                            maxMinute = Math.min(59, minMinute);
                          }
                          if (
                            minHour === maxHour &&
                            minMinute === maxMinute &&
                            minSecond > maxSecond
                          ) {
                            maxSecond = Math.min(59, minSecond);
                          }

                          // Generate random components within the adjusted ranges
                          const hours = String(
                            Math.floor(minHour + Math.random() * (maxHour - minHour + 1))
                          ).padStart(2, "0");

                          // Handle minutes based on hour selection
                          let minutes;
                          if (parseInt(hours) === minHour) {
                            minutes = String(
                              Math.floor(minMinute + Math.random() * (maxMinute - minMinute + 1))
                            ).padStart(2, "0");
                          } else {
                            minutes = String(
                              Math.floor(minMinute + Math.random() * (maxMinute - minMinute + 1))
                            ).padStart(2, "0");
                          }

                          // Handle seconds based on hour and minute selection
                          let seconds;
                          if (parseInt(hours) === minHour && parseInt(minutes) === minMinute) {
                            seconds = String(
                              Math.floor(minSecond + Math.random() * (maxSecond - minSecond + 1))
                            ).padStart(2, "0");
                          } else {
                            seconds = String(
                              Math.floor(minSecond + Math.random() * (maxSecond - minSecond + 1))
                            ).padStart(2, "0");
                          }

                          return `${hours}:${minutes}:${seconds}`;
                        }

                        function updatePreview() {
                          if (excelData.length === 0) return;

                          const previewCard = document.getElementById("previewCard");
                          const previewBody = document.getElementById("previewBody");
                          const template = document.getElementById("template").value;

                          // Clear previous preview
                          previewBody.innerHTML = "";

                          // Get time settings
                          const minHour = parseInt(document.getElementById("minHour").value) || 9;
                          const maxHour = parseInt(document.getElementById("maxHour").value) || 17;
                          const minMinute =
                            parseInt(document.getElementById("minMinute").value) || 0;
                          const maxMinute =
                            parseInt(document.getElementById("maxMinute").value) || 59;

                          // Show preview of up to 10 rows
                          const previewLimit = Math.min(10, excelData.length);
                          for (let i = 0; i < previewLimit; i++) {
                            const row = excelData[i];

                            // Get phone number from appropriate field
                            const phone = row.to || row.phone || row.number || row.no || "";

                            // Get name from appropriate field
                            const name = row.name || row.nama || "";

                            // Generate message preview
                            const messagePreview = renderTemplate(template, row);

                            // Create a sample scheduled time
                            const now = new Date();
                            const scheduledDate = `${now.getFullYear()}-${String(
                              now.getMonth() + 1
                            ).padStart(2, "0")}-${String(now.getDate()).padStart(2, "0")}`;
                            const scheduledTime = `${scheduledDate} ${getRandomTime(
                              minHour,
                              maxHour,
                              minMinute,
                              maxMinute
                            )}`;

                            // Create table row
                            const tr = document.createElement("tr");
                            tr.innerHTML = `
                              <td>${i + 1}</td>
                              <td>${phone}</td>
                              <td>${name}</td>
                              <td>${messagePreview}</td>
                              <td>${scheduledTime}</td>
                            `;
                            previewBody.appendChild(tr);
                          }

                          // Show preview card
                          previewCard.style.display = "block";
                        }

                        function resetForm() {
                          document.getElementById("bulkMessageForm").reset();
                          document.getElementById("datajson").value = "";
                          document.getElementById("uploadInfo").style.display = "none";
                          document.getElementById("errorInfo").style.display = "none";
                          document.getElementById("previewCard").style.display = "none";
                          document.getElementById("submitBtn").disabled = true;
                          excelData = [];
                        }

                        document.addEventListener("DOMContentLoaded", function () {
                          const form = document.getElementById("bulkMessageForm");
                          const submitBtn = document.getElementById("submitBtn");
                          const errorInfo = document.getElementById("errorInfo");
                          const uploadInfo = document.getElementById("uploadInfo");
                          const templateField = document.getElementById("template");

                          // Handle file upload
                          document
                            .getElementById("excelFile")
                            .addEventListener("change", async (event) => {
                              const file = event.target.files[0];
                              if (!file) return;

                              try {
                                excelData = await excelToJson(file);
                                const validation = validateExcelData(excelData);

                                if (validation.isValid) {
                                  // show paramaters from data
                                  // Get all unique keys from all objects
                                  const allKeys = [
                                    ...new Set(excelData.flatMap((obj) => Object.keys(obj))),
                                  ];

                                  // Format as requested
                                  const formattedOutput = `Use ${allKeys
                                    .map((key) => `{{ ${key} }}`)
                                    .join(", ")} to insert data from Excel.
                                        Example: Hello {{ name }}`;
                                  document.getElementById("parameters-info").textContent =
                                    formattedOutput;

                                  document.getElementById("datajson").value =
                                    JSON.stringify(excelData);
                                  document.getElementById(
                                    "fileDetails"
                                  ).textContent = `Loaded ${excelData.length} records from "${file.name}"`;
                                  uploadInfo.style.display = "block";
                                  errorInfo.style.display = "none";
                                  submitBtn.disabled = !templateField.value.trim();

                                  // Update preview if template exists
                                  if (templateField.value.trim()) {
                                    updatePreview();
                                  }
                                } else {
                                  errorInfo.innerHTML = `<strong>Excel validation failed:</strong><ul>${validation.errors
                                    .map((err) => `<li>${err}</li>`)
                                    .join("")}</ul>`;
                                  errorInfo.style.display = "block";
                                  uploadInfo.style.display = "none";
                                  submitBtn.disabled = true;
                                }
                              } catch (error) {
                                console.error("Error processing Excel file:", error);
                                errorInfo.textContent = `Error processing Excel file: ${error.message}`;
                                errorInfo.style.display = "block";
                                uploadInfo.style.display = "none";
                                submitBtn.disabled = true;
                              }
                            });

                          // Enable/disable submit button based on template content
                          templateField.addEventListener("input", function () {
                            submitBtn.disabled = !this.value.trim() || excelData.length === 0;

                            // Update preview if data is loaded
                            if (excelData.length > 0 && this.value.trim()) {
                              updatePreview();
                            }
                          });

                          // Update preview when time settings change
                          document
                            .getElementById("minHour")
                            .addEventListener("change", updatePreview);
                          document
                            .getElementById("maxHour")
                            .addEventListener("change", updatePreview);
                          document
                            .getElementById("minMinute")
                            .addEventListener("change", updatePreview);
                          document
                            .getElementById("maxMinute")
                            .addEventListener("change", updatePreview);

                          // Handle form submission
                          form.addEventListener("submit", function (e) {
                            if (!templateField.value.trim() || excelData.length === 0) {
                              e.preventDefault();
                              errorInfo.textContent =
                                "Please provide both an Excel file and a message template.";
                              errorInfo.style.display = "block";
                              return false;
                            }

                            // Add time config to the form
                            const timeConfig = {
                              minHour: document.getElementById("minHour").value,
                              maxHour: document.getElementById("maxHour").value,
                              minMinute: document.getElementById("minMinute").value,
                              maxMinute: document.getElementById("maxMinute").value,
                            };

                            // Convert time config to JSON string and add to form data
                            const timeConfigInput = document.createElement("input");
                            timeConfigInput.type = "hidden";
                            timeConfigInput.name = "timeConfig";
                            timeConfigInput.value = JSON.stringify(timeConfig);
                            form.appendChild(timeConfigInput);
                          });
                        });
                      </script>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Logs Tab -->
            <div class="tab-pane fade" id="logs" role="tabpanel">
              <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                  <h5 class="card-title m-0">Activity Logs</h5>
                  <button class="btn btn-sm btn-outline-secondary" id="clear-logs">
                    <i class="bi bi-trash"></i> Clear Logs
                  </button>
                </div>
                <div class="card-body">
                  <div class="message-log d-flex flex-column" id="message-log">
                    <div class="text-center py-4 text-muted">
                      <i class="bi bi-chat-dots" style="font-size: 2rem"></i>
                      <p class="mt-2">No activity yet. Send a message to see logs.</p>
                    </div>
                  </div>
                </div>
              </div>
            </div>

            <!-- Settings Tab -->
            <div class="tab-pane fade" id="settings" role="tabpanel">
              <div class="card">
                <div class="card-header">
                  <h5 class="card-title m-0">Session Settings</h5>
                </div>
                <div class="card-body">
                  <div
                    class="d-flex justify-content-between align-items-center border-bottom pb-3 mb-3"
                  >
                    <div>
                      <h6 class="m-0">Logout Session</h6>
                      <p class="text-muted m-0">
                        Disconnect this WhatsApp session but keep its data
                      </p>
                    </div>
                    <button class="btn btn-warning" id="logout-btn">
                      <i class="bi bi-box-arrow-right"></i> Logout
                    </button>
                  </div>
                  <div class="d-flex justify-content-between align-items-center">
                    <div>
                      <h6 class="m-0">Delete Session</h6>
                      <p class="text-muted m-0">Remove this session and all its data permanently</p>
                    </div>
                    <button class="btn btn-danger" id="delete-btn">
                      <i class="bi bi-trash"></i> Delete
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <!-- Message Status Modal -->
    <div class="modal fade" id="statusModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title" id="statusTitle">Message Status</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body" id="statusMessage"></div>
          <div class="modal-footer">
            <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
          </div>
        </div>
      </div>
    </div>

    <!-- Delete Confirmation Modal -->
    <div class="modal fade" id="deleteModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Delete Session</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to delete this session? This action cannot be undone.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirm-delete">Delete</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const sessionId = "<%= sessionId %>";
      const socket = io();
      const statusModal = new bootstrap.Modal(document.getElementById("statusModal"));
      const deleteModal = new bootstrap.Modal(document.getElementById("deleteModal"));

      // Load session info
      async function loadSessionInfo() {
        try {
          const response = await fetch("/api/sessions");
          const data = await response.json();

          if (data.success) {
            const session = data.data.find((s) => s.id === sessionId);
            if (session) {
              const status = session.connected ? "Online" : "Offline";
              const statusClass = session.connected ? "online" : "offline";
              document.getElementById(
                "session-status"
              ).innerHTML = `<span class="online-indicator ${statusClass}"></span> ${status}`;
            } else {
              document.getElementById("session-status").textContent = "Session not found";
            }
          }
        } catch (error) {
          console.error("Error loading session info:", error);
        }
      }

      // Load Scheduled Messages
      const loadScheduledMessages = async () => {
        try {
          const response = await fetch(`/api/schedule-messages/${sessionId}`);
          const data = await response.json();
          if (data.success) {
            const messages = data.data;
            const tbody = document.getElementById("scheduled-messages");
            tbody.innerHTML = "";
            if (messages.length === 0) {
              tbody.innerHTML =
                '<tr><td colspan="4" class="text-center">No scheduled messages.</td></tr>';
              return;
            }
            messages.forEach((msg) => {
              const tr = document.createElement("tr");
              tr.innerHTML = `
                  <td>${msg.to.replace("@s.whatsapp.net", "")}</td>
                  <td>${msg.message}</td>
                  <td>${new Date(msg.scheduledTime).toLocaleString()}</td>
                  <td>
                    <button class="btn btn-sm btn-warning me-2 edit-schedule" data-id="${
                      msg.id
                    }"><i class="bi bi-pencil"></i> </button>
                    <button class="btn btn-sm btn-danger delete-schedule" data-id="${
                      msg.id
                    }"><i class="bi bi-trash"></i> </button>
                  </td>
                `;
              tbody.appendChild(tr);
            });

            // Add event listeners for edit and delete buttons
            document.querySelectorAll(".edit-schedule").forEach((btn) => {
              btn.addEventListener("click", (e) => {
                const messageId = e.target.closest("button").dataset.id;
                // Implement edit functionality
                // You can show a modal with a form to edit the scheduled message
                // and handle the form submission similar to scheduling a new message
                showEditModal(messageId);
              });
            });

            document.querySelectorAll(".delete-schedule").forEach((btn) => {
              btn.addEventListener("click", async (e) => {
                const messageId = e.target.closest("button").dataset.id;
                try {
                  const response = await fetch(`/api/schedule-message/${sessionId}/${messageId}`, {
                    method: "DELETE",
                  });
                  const result = await response.json();
                  if (result.success) {
                    showStatusModal("Success", "Scheduled message deleted successfully.");
                    loadScheduledMessages();
                  } else {
                    throw new Error(result.error);
                  }
                } catch (error) {
                  showStatusModal("Error", error.message);
                }
              });
            });
          } else {
            throw new Error(data.error);
          }
        } catch (error) {
          showStatusModal("Error", error.message);
        }
      };

      // Show Status Modal
      const showStatusModal = (title, message) => {
        document.getElementById("statusTitle").textContent = title;
        document.getElementById("statusMessage").textContent = message;
        statusModal.show();
      };

      // Edit Scheduled Message (Implementation Example)
      const showEditModal = async (messageId) => {
        try {
          // Fetch the specific scheduled message details
          const response = await fetch(`/api/schedule-messages/${sessionId}`);
          const data = await response.json();
          if (data.success) {
            const message = data.data.find((msg) => msg.id === messageId);
            if (message) {
              // Populate the form with existing data
              // Create and show a modal with a form to edit the message
              // For simplicity, using a prompt (replace with a proper modal as needed)
              const newTo = prompt(
                "Enter new phone number:",
                message.to.replace("@s.whatsapp.net", "")
              );
              if (newTo === null) return; // Cancelled
              const newMessage = prompt("Enter new message:", message.message);
              if (newMessage === null) return; // Cancelled
              const newScheduledTime = prompt(
                "Enter new scheduled time (YYYY-MM-DDTHH:MM):",
                message.scheduledTime.slice(0, 16)
              );
              if (newScheduledTime === null) return; // Cancelled

              // Send update request
              const updateResponse = await fetch(
                `/api/schedule-message/${sessionId}/${messageId}`,
                {
                  method: "PUT",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    to: newTo,
                    message: newMessage,
                    scheduledTime: newScheduledTime,
                  }),
                }
              );
              const updateResult = await updateResponse.json();
              if (updateResult.success) {
                showStatusModal("Success", "Scheduled message updated successfully.");
                loadScheduledMessages();
              } else {
                throw new Error(updateResult.error);
              }
            } else {
              throw new Error("Scheduled message not found");
            }
          } else {
            throw new Error(data.error);
          }
        } catch (error) {
          showStatusModal("Error", error.message);
        }
      };

      // Listen for real-time updates
      socket.on(`qr.${sessionId}`, (data) => {
        // Display QR code on UI if needed
        console.log(`QR Code for ${data.sessionId}: ${data.qrCode}`);
        document.getElementById("qrCode").src = data.qrCode;
      });

      socket.on(`session.${sessionId}.connected`, (data) => {
        const status = data.connected ? "Online" : "Offline";
        const statusClass = data.connected ? "online" : "offline";
        document.getElementById(
          "session-status"
        ).innerHTML = `<span class="online-indicator ${statusClass}"></span> ${status}`;
      });

      socket.on("session.update", (data) => {
        if (data.action === "remove" && data.sessionId === sessionId) {
          alert("Session has been removed.");
          window.location.href = "/";
        } else if (data.action === "update" && data.session.id === sessionId) {
          // Update session info if needed
        }
      });

      // Document ready
      document.addEventListener("DOMContentLoaded", function () {
        loadSessionInfo();
        loadScheduledMessages();

        document.getElementById("message-form").addEventListener("submit", async (e) => {
          e.preventDefault();
          const phone = document.getElementById("phone").value;
          const message = document.getElementById("message").value;

          // Update preview
          document.getElementById("preview-to").textContent = phone;
          document.getElementById("preview-content").innerHTML = `<p>${message}</p>`;

          // Send message
          try {
            const response = await fetch(`/api/send-message/${sessionId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ to: phone, message }),
            });
            const result = await response.json();
            if (result.success) {
              document.getElementById("statusTitle").textContent = "Success";
              document.getElementById("statusMessage").textContent = "Message sent successfully.";
            } else {
              throw new Error(result.error);
            }
          } catch (error) {
            document.getElementById("statusTitle").textContent = "Error";
            document.getElementById("statusMessage").textContent = error.message;
          }
          statusModal.show();
        });
        document.getElementById("media-form").addEventListener("submit", async (e) => {
          e.preventDefault();
          const phone = document.getElementById("media-phone").value;
          const mediaType = document.getElementById("media-type").value;
          const mediaUrl = document.getElementById("media-url").value;
          const caption = document.getElementById("media-caption").value;

          // Send media
          try {
            const response = await fetch(`/api/send-media/${sessionId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ to: phone, mediaUrl, mediaType, caption }),
            });
            const result = await response.json();
            if (result.success) {
              document.getElementById("statusTitle").textContent = "Success";
              document.getElementById("statusMessage").textContent = "Media sent successfully.";
            } else {
              throw new Error(result.error);
            }
          } catch (error) {
            document.getElementById("statusTitle").textContent = "Error";
            document.getElementById("statusMessage").textContent = error.message;
          }
          statusModal.show();
        });

        socket.on(`${sessionId}.message`, (message) => {
          const logContainer = document.getElementById("message-log");
          logContainer.innerHTML = ""; // Clear initial placeholder

          message.messages.forEach((msg) => {
            const div = document.createElement("div");
            div.classList.add("message");
            div.classList.add(msg.key.fromMe ? "message-sent" : "message-received");
            div.textContent = msg.message.conversation || "No message content";
            logContainer.prepend(div);
          });
        });

        document.getElementById("clear-logs").addEventListener("click", () => {
          document.getElementById("message-log").innerHTML = `
          <div class="text-center py-4 text-muted">
              <i class="bi bi-chat-dots" style="font-size: 2rem;"></i>
              <p class="mt-2">No activity yet. Send a message to see logs.</p>
          </div>
      `;
        });
        document.getElementById("logout-btn").addEventListener("click", async () => {
          try {
            const response = await fetch(`/api/sessions/${sessionId}/logout`, {
              method: "POST",
            });
            const result = await response.json();
            if (result.success) {
              document.getElementById("statusTitle").textContent = "Success";
              document.getElementById("statusMessage").textContent =
                "Session logged out successfully.";
            } else {
              throw new Error(result.error);
            }
          } catch (error) {
            document.getElementById("statusTitle").textContent = "Error";
            document.getElementById("statusMessage").textContent = error.message;
          }
          statusModal.show();
        });

        document.getElementById("delete-btn").addEventListener("click", () => {
          deleteModal.show();
        });

        document.getElementById("confirm-delete").addEventListener("click", async () => {
          try {
            const response = await fetch(`/api/sessions/${sessionId}`, {
              method: "DELETE",
            });
            const result = await response.json();
            if (result.success) {
              document.getElementById("statusTitle").textContent = "Success";
              document.getElementById("statusMessage").textContent =
                "Session deleted successfully.";
              statusModal.show();
              window.location.href = "/";
            } else {
              throw new Error(result.error);
            }
          } catch (error) {
            document.getElementById("statusTitle").textContent = "Error";
            document.getElementById("statusMessage").textContent = error.message;
            statusModal.show();
          }
        });

        // Handle Schedule Message Form Submission
        document.getElementById("schedule-form").addEventListener("submit", async (e) => {
          e.preventDefault();
          const to = document.getElementById("schedule-phone").value;
          const message = document.getElementById("schedule-message").value;
          const scheduledTime = document.getElementById("scheduled-time").value;

          let payload = {
            to,
            message,
            scheduledTime,
          };

          console.log(document.querySelector("#isRecurring").checked);
          // Add recurring options if selected
          if (document.querySelector("#isRecurring").checked) {
            const recurringType = document.querySelector(
              'input[name="recurringType"]:checked'
            ).value;
            let recurringOptions = {
              type: recurringType,
            };

            // If custom days are selected, add them to the options
            if (recurringType === "custom") {
              const days = [
                "monday",
                "tuesday",
                "wednesday",
                "thursday",
                "friday",
                "saturday",
                "sunday",
              ];
              const selectedDays = days.filter(
                (day) => document.getElementById(`day-${day}`).value === "on"
              );

              if (selectedDays.length === 0) {
                alert("Please select at least one day for custom recurring schedule");
                return;
              }

              recurringOptions.days = selectedDays;
            }

            // Add end date if specified
            if (document.getElementById("endDate")) {
              recurringOptions.endDate =
                document.getElementById("endDate").value == ""
                  ? null
                  : new Date(document.getElementById("endDate").value).toISOString();
            }

            payload.recurringOptions = recurringOptions;
          }

          console.log(payload);

          try {
            const response = await fetch(`/api/schedule-message/${sessionId}`, {
              method: "POST",
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify(payload),
            });
            const result = await response.json();
            if (result.success) {
              showStatusModal("Success", "Message scheduled successfully.");
              loadScheduledMessages();
              document.getElementById("schedule-form").reset();
            } else {
              throw new Error(result.error);
            }
          } catch (error) {
            showStatusModal("Error", error.message);
          }
        });

        // Show/hide recurring options based on checkbox
        document.getElementById("isRecurring").addEventListener("change", function () {
          const recurringOptions = document.getElementById("recurringOptions");
          recurringOptions.classList.toggle("d-none", !this.checked);
        });

        // Show/hide custom days selection based on recurring type
        document.querySelectorAll('input[name="recurringType"]').forEach((radio) => {
          radio.addEventListener("change", function () {
            const customDaysSelection = document.getElementById("customDaysSelection");
            customDaysSelection.classList.toggle("d-none", this.value !== "custom");
          });
        });

        // Refresh Scheduled Messages
        document
          .getElementById("refresh-scheduled")
          .addEventListener("click", loadScheduledMessages);
      });
    </script>
  </body>
</html>
