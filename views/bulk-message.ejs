<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <style>
      .session-card {
        transition: all 0.3s;
      }
      .session-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      }
      .online-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
      }
      .online {
        background-color: #28a745;
      }
      .offline {
        background-color: #dc3545;
      }
    </style>
    <script src="https://cdn.sheetjs.com/xlsx-0.20.3/package/dist/xlsx.full.min.js"></script>
  </head>
  <body class="bg-light">
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/">WA Gateway</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link active" href="/">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/documentation">API Docs</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/settings">Settings</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <div class="container py-4">
      <div class="card">
        <div class="card-header">
          <h3>Schedule Bulk Messages</h3>
        </div>
        <div class="card-body">
          <!-- Form with proper styling -->
          <form id="bulkMessageForm" action="/session/<%= sessionId %>/bulk-message" method="post">
            <div class="mb-3">
              <label for="excelFile" class="form-label">Upload Excel File</label>
              <input class="form-control" type="file" id="excelFile" accept=".xlsx,.xls" />
              <small class="text-muted"
                >Required columns: to, name. Optional: message, scheduledTime</small
              >
            </div>

            <div class="mb-3">
              <label for="template" class="form-label">Message Template</label>
              <textarea
                name="template"
                id="template"
                class="form-control"
                rows="4"
                placeholder="Hello {{ name }}, this is your notification..."
              ></textarea>
              <small class="text-muted"
                >Use {{ field }} to insert data from Excel. Example: Hello {{ name }}</small
              >
            </div>

            <div class="mb-3">
              <label class="form-label">Time Settings</label>
              <div class="row">
                <div class="col-md-3">
                  <label for="minHour" class="form-label">Start Hour</label>
                  <input
                    type="number"
                    id="minHour"
                    name="timeConfig[minHour]"
                    class="form-control"
                    min="0"
                    max="23"
                    value="9"
                  />
                </div>
                <div class="col-md-3">
                  <label for="maxHour" class="form-label">End Hour</label>
                  <input
                    type="number"
                    id="maxHour"
                    name="timeConfig[maxHour]"
                    class="form-control"
                    min="0"
                    max="23"
                    value="17"
                  />
                </div>
                <div class="col-md-3">
                  <label for="minMinute" class="form-label">Start Minute</label>
                  <input
                    type="number"
                    id="minMinute"
                    name="timeConfig[minMinute]"
                    class="form-control"
                    min="0"
                    max="59"
                    value="0"
                  />
                </div>
                <div class="col-md-3">
                  <label for="maxMinute" class="form-label">End Minute</label>
                  <input
                    type="number"
                    id="maxMinute"
                    name="timeConfig[maxMinute]"
                    class="form-control"
                    min="0"
                    max="59"
                    value="59"
                  />
                </div>
              </div>
            </div>

            <!-- Hidden field for JSON data -->
            <input type="hidden" name="datajson" id="datajson" />

            <div class="mb-3">
              <div class="alert alert-info" id="uploadInfo" style="display: none">
                <span id="fileDetails"></span>
              </div>
              <div class="alert alert-danger" id="errorInfo" style="display: none"></div>
            </div>

            <div class="mb-3">
              <button type="submit" class="btn btn-primary" id="submitBtn" disabled>
                Schedule Messages
              </button>
              <button type="button" class="btn btn-secondary" onclick="resetForm()">Reset</button>
            </div>
          </form>
        </div>
      </div>

      <!-- Preview section -->
      <div class="card mt-4" id="previewCard" style="display: none">
        <div class="card-header">
          <h4>Data Preview</h4>
        </div>
        <div class="card-body">
          <div class="table-responsive">
            <table class="table table-striped" id="previewTable">
              <thead>
                <tr>
                  <th>#</th>
                  <th>To</th>
                  <th>Name</th>
                  <th>Message Preview</th>
                  <th>Scheduled Time</th>
                </tr>
              </thead>
              <tbody id="previewBody">
                <!-- Preview rows will be inserted here -->
              </tbody>
            </table>
          </div>
          <p><small>Showing up to 10 preview rows.</small></p>
        </div>
      </div>
    </div>

    <script>
      // Load XLSX from CDN if not already included
      if (typeof XLSX === "undefined") {
        const script = document.createElement("script");
        script.src = "https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js";
        document.head.appendChild(script);
      }

      let excelData = [];

      function excelToJson(file) {
        return new Promise((resolve, reject) => {
          const reader = new FileReader();
          reader.readAsBinaryString(file);

          reader.onload = (event) => {
            try {
              const data = event.target.result;
              const workbook = XLSX.read(data, { type: "binary" });
              const sheetName = workbook.SheetNames[0];
              const sheet = workbook.Sheets[sheetName];
              const json = XLSX.utils.sheet_to_json(sheet);

              resolve(json);
            } catch (error) {
              reject(error);
            }
          };

          reader.onerror = (error) => reject(error);
        });
      }

      function validateExcelData(data) {
        if (!Array.isArray(data) || data.length === 0) {
          return {
            isValid: false,
            errors: ["Excel file is empty or has no valid data"],
          };
        }

        const firstRow = data[0];
        const errors = [];

        // Check required columns
        const hasToColumn =
          "to" in firstRow || "phone" in firstRow || "number" in firstRow || "no" in firstRow;
        const hasNameColumn = "name" in firstRow || "nama" in firstRow;

        if (!hasToColumn) {
          errors.push("Missing required 'to' column (alternatives: 'phone', 'number', 'no')");
        }

        if (!hasNameColumn) {
          errors.push("Missing required 'name' column (alternative: 'nama')");
        }

        return {
          isValid: errors.length === 0,
          errors: errors,
        };
      }

      function renderTemplate(template, data) {
        return template.replace(/{{\s*(\w+)\s*}}/g, (match, key) => {
          return data[key] !== undefined ? data[key] : match;
        });
      }

      function getRandomTime(minHour = 9, maxHour = 17, minMinute = 0, maxMinute = 59) {
        const hours = String(
          Math.floor(minHour + Math.random() * (maxHour - minHour + 1))
        ).padStart(2, "0");
        const minutes = String(
          Math.floor(minMinute + Math.random() * (maxMinute - minMinute + 1))
        ).padStart(2, "0");
        const seconds = String(Math.floor(Math.random() * 60)).padStart(2, "0");
        return `${hours}:${minutes}:${seconds}`;
      }

      function updatePreview() {
        if (excelData.length === 0) return;

        const previewCard = document.getElementById("previewCard");
        const previewBody = document.getElementById("previewBody");
        const template = document.getElementById("template").value;

        // Clear previous preview
        previewBody.innerHTML = "";

        // Get time settings
        const minHour = parseInt(document.getElementById("minHour").value) || 9;
        const maxHour = parseInt(document.getElementById("maxHour").value) || 17;
        const minMinute = parseInt(document.getElementById("minMinute").value) || 0;
        const maxMinute = parseInt(document.getElementById("maxMinute").value) || 59;

        // Show preview of up to 10 rows
        const previewLimit = Math.min(10, excelData.length);
        for (let i = 0; i < previewLimit; i++) {
          const row = excelData[i];

          // Get phone number from appropriate field
          const phone = row.to || row.phone || row.number || row.no || "";

          // Get name from appropriate field
          const name = row.name || row.nama || "";

          // Generate message preview
          const messagePreview = renderTemplate(template, row);

          // Create a sample scheduled time
          const now = new Date();
          const scheduledDate = `${now.getFullYear()}-${String(now.getMonth() + 1).padStart(
            2,
            "0"
          )}-${String(now.getDate()).padStart(2, "0")}`;
          const scheduledTime = `${scheduledDate} ${getRandomTime(
            minHour,
            maxHour,
            minMinute,
            maxMinute
          )}`;

          // Create table row
          const tr = document.createElement("tr");
          tr.innerHTML = `
            <td>${i + 1}</td>
            <td>${phone}</td>
            <td>${name}</td>
            <td>${messagePreview}</td>
            <td>${scheduledTime}</td>
          `;
          previewBody.appendChild(tr);
        }

        // Show preview card
        previewCard.style.display = "block";
      }

      function resetForm() {
        document.getElementById("bulkMessageForm").reset();
        document.getElementById("datajson").value = "";
        document.getElementById("uploadInfo").style.display = "none";
        document.getElementById("errorInfo").style.display = "none";
        document.getElementById("previewCard").style.display = "none";
        document.getElementById("submitBtn").disabled = true;
        excelData = [];
      }

      document.addEventListener("DOMContentLoaded", function () {
        const form = document.getElementById("bulkMessageForm");
        const submitBtn = document.getElementById("submitBtn");
        const errorInfo = document.getElementById("errorInfo");
        const uploadInfo = document.getElementById("uploadInfo");
        const templateField = document.getElementById("template");

        // Handle file upload
        document.getElementById("excelFile").addEventListener("change", async (event) => {
          const file = event.target.files[0];
          if (!file) return;

          try {
            excelData = await excelToJson(file);
            const validation = validateExcelData(excelData);

            if (validation.isValid) {
              document.getElementById("datajson").value = JSON.stringify(excelData);
              document.getElementById(
                "fileDetails"
              ).textContent = `Loaded ${excelData.length} records from "${file.name}"`;
              uploadInfo.style.display = "block";
              errorInfo.style.display = "none";
              submitBtn.disabled = !templateField.value.trim();

              // Update preview if template exists
              if (templateField.value.trim()) {
                updatePreview();
              }
            } else {
              errorInfo.innerHTML = `<strong>Excel validation failed:</strong><ul>${validation.errors
                .map((err) => `<li>${err}</li>`)
                .join("")}</ul>`;
              errorInfo.style.display = "block";
              uploadInfo.style.display = "none";
              submitBtn.disabled = true;
            }
          } catch (error) {
            console.error("Error processing Excel file:", error);
            errorInfo.textContent = `Error processing Excel file: ${error.message}`;
            errorInfo.style.display = "block";
            uploadInfo.style.display = "none";
            submitBtn.disabled = true;
          }
        });

        // Enable/disable submit button based on template content
        templateField.addEventListener("input", function () {
          submitBtn.disabled = !this.value.trim() || excelData.length === 0;

          // Update preview if data is loaded
          if (excelData.length > 0 && this.value.trim()) {
            updatePreview();
          }
        });

        // Update preview when time settings change
        document.getElementById("minHour").addEventListener("change", updatePreview);
        document.getElementById("maxHour").addEventListener("change", updatePreview);
        document.getElementById("minMinute").addEventListener("change", updatePreview);
        document.getElementById("maxMinute").addEventListener("change", updatePreview);

        // Handle form submission
        form.addEventListener("submit", function (e) {
          if (!templateField.value.trim() || excelData.length === 0) {
            e.preventDefault();
            errorInfo.textContent = "Please provide both an Excel file and a message template.";
            errorInfo.style.display = "block";
            return false;
          }

          // Add time config to the form
          const timeConfig = {
            minHour: document.getElementById("minHour").value,
            maxHour: document.getElementById("maxHour").value,
            minMinute: document.getElementById("minMinute").value,
            maxMinute: document.getElementById("maxMinute").value,
          };

          // Convert time config to JSON string and add to form data
          const timeConfigInput = document.createElement("input");
          timeConfigInput.type = "hidden";
          timeConfigInput.name = "timeConfig";
          timeConfigInput.value = JSON.stringify(timeConfig);
          form.appendChild(timeConfigInput);
        });
      });
    </script>
  </body>
</html>
