<!-- views/session-detail.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <style>
      .message-form {
        position: sticky;
        bottom: 0;
        background-color: #f8f9fa;
        padding: 1rem;
        border-top: 1px solid #dee2e6;
        border-radius: 0 0 0.25rem 0.25rem;
      }
      .message-log {
        max-height: 400px;
        overflow-y: auto;
      }
      .message {
        padding: 0.5rem 1rem;
        margin-bottom: 0.5rem;
        border-radius: 0.5rem;
        max-width: 80%;
      }
      .message-received {
        background-color: #f1f0f0;
        align-self: flex-start;
      }
      .message-sent {
        background-color: #d1f7c4;
        align-self: flex-end;
      }
      .online-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
      }
      .online {
        background-color: #28a745;
      }
      .offline {
        background-color: #dc3545;
      }
      .tab-content {
        padding-top: 1rem;
      }

      #sessionTabs .nav-link {
        color: #333 !important;
      }
      /* Media Preview Styles */
      #media-preview-container {
        min-height: 200px;
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
      }
      #media-preview-content img {
        max-width: 100%;
        max-height: 300px;
        object-fit: contain;
      }
      #media-preview-content video,
      #media-preview-content audio {
        max-width: 100%;
      }
      .media-file-icon {
        font-size: 4rem;
        color: #6c757d;
      }
      #media-file-info {
        width: 100%;
        margin-top: 1rem;
        padding-top: 0.5rem;
        border-top: 1px solid #dee2e6;
      }
    </style>
  </head>
  <body class="bg-light">
    <div id="app">
      <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
        <div class="container">
          <a class="navbar-brand" href="/">WA Gateway</a>
          <button
            class="navbar-toggler"
            type="button"
            data-bs-toggle="collapse"
            data-bs-target="#navbarNav"
          >
            <span class="navbar-toggler-icon"></span>
          </button>
          <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav me-auto">
              <li class="nav-item">
                <a class="nav-link" href="/">Dashboard</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/documentation">API Docs</a>
              </li>
              <li class="nav-item">
                <a class="nav-link" href="/settings">Settings</a>
              </li>
            </ul>
          </div>
        </div>
      </nav>

      <div class="container py-4">
        <div class="row">
          <div class="col-md-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
              <div>
                <h1 id="session-title"><%= sessionId %></h1>
                <div id="session-status"></div>
                <!-- <img id="qrCode" src="#" alt="QR Code" /> -->
              </div>
              <a href="/" class="btn btn-outline-secondary">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
              </a>
            </div>
          </div>
          <div class="col-md-12">
            <ul class="nav nav-tabs" id="sessionTabs" role="tablist">
              <li class="nav-item" role="presentation">
                <button
                  class="nav-link active"
                  id="test-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#test"
                  type="button"
                  role="tab"
                >
                  <i class="bi bi-send"></i> Send Message
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button
                  class="nav-link"
                  id="logs-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#logs"
                  type="button"
                  role="tab"
                >
                  <i class="bi bi-list-ul"></i> Activity Logs
                </button>
              </li>
              <li class="nav-item" role="presentation">
                <button
                  class="nav-link"
                  id="settings-tab"
                  data-bs-toggle="tab"
                  data-bs-target="#settings"
                  type="button"
                  role="tab"
                >
                  <i class="bi bi-gear"></i> Session Settings
                </button>
              </li>
            </ul>

            <div
              class="tab-content bg-white p-3 rounded border border-top-0 shadow-sm"
              id="sessionTabsContent"
            >
              <!-- Test Message Tab -->
              <div class="tab-pane fade show active" id="test" role="tabpanel">
                <div class="row">
                  <div class="col-12">
                    <!-- <h3 class="mt-2 mb-4">Send a Messages</h3> -->
                  </div>
                  <div class="col-md-5">
                    <!-- Nav tabs -->
                    <ul
                      class="nav nav-pills nav-justified p-1 border bg-light rounded"
                      id="myTab"
                      role="tablist"
                    >
                      <li class="nav-item" role="presentation">
                        <button
                          class="nav-link active"
                          id="home-tab"
                          data-bs-toggle="tab"
                          data-bs-target="#home"
                          type="button"
                          role="tab"
                          aria-controls="home"
                          aria-selected="true"
                        >
                          <i class="bi bi-card-text"></i>
                          Text
                        </button>
                      </li>
                      <li class="nav-item" role="presentation">
                        <button
                          class="nav-link"
                          id="messages-tab"
                          data-bs-toggle="tab"
                          data-bs-target="#messages"
                          type="button"
                          role="tab"
                          aria-controls="messages"
                          aria-selected="false"
                        >
                          <i class="bi bi-images"></i>
                          Media
                        </button>
                      </li>
                      <li class="nav-item" role="presentation">
                        <button
                          class="nav-link"
                          id="profile-tab"
                          data-bs-toggle="tab"
                          data-bs-target="#profile"
                          type="button"
                          role="tab"
                          aria-controls="profile"
                          aria-selected="false"
                        >
                          <i class="bi bi-clock-history"></i>
                          Schedule
                        </button>
                      </li>
                    </ul>
                  </div>

                  <div class="col-md-12">
                    <!-- Tab panes -->
                    <div class="tab-content">
                      <div
                        class="tab-pane active"
                        id="home"
                        role="tabpanel"
                        aria-labelledby="home-tab"
                      >
                        <div class="row">
                          <div class="col-md-5">
                            <div class="card">
                              <div class="card-header">
                                <h5>Send Message</h5>
                              </div>
                              <div class="card-body">
                                <form @submit.prevent="sendMessage" id="message-form">
                                  <div class="mb-3">
                                    <label for="phone" class="form-label">Phone Number</label>
                                    <input
                                      type="text"
                                      class="form-control"
                                      id="phone"
                                      v-model="messageForm.phone"
                                      placeholder="+1234567890"
                                      required
                                    />
                                  </div>
                                  <div class="mb-3">
                                    <label for="message" class="form-label">Message</label>
                                    <textarea
                                      class="form-control"
                                      id="message"
                                      v-model="messageForm.message"
                                      rows="3"
                                      required
                                    ></textarea>
                                  </div>
                                  <div class="card mb-3">
                                    <div class="card-header">
                                      <h6 class="mb-0">Preview</h6>
                                    </div>
                                    <div class="card-body">
                                      <p>
                                        <strong>To:</strong>
                                        <span id="preview-to">{{
                                          messageForm.phone || "Not specified"
                                        }}</span>
                                      </p>
                                      <div
                                        id="preview-content"
                                        v-html="'<p>' + (messageForm.message || 'No message content') + '</p>'"
                                      ></div>
                                    </div>
                                  </div>
                                  <button type="submit" class="btn btn-primary">
                                    Send Message
                                  </button>
                                </form>
                              </div>
                            </div>
                          </div>
                          <div class="col-md-7">
                            <div class="card">
                              <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                  <h5 class="mb-0">Message Logs</h5>
                                  <button
                                    class="btn btn-sm btn-outline-secondary"
                                    @click="clearLogs"
                                  >
                                    Clear
                                  </button>
                                </div>
                              </div>
                              <div class="card-body">
                                <div
                                  id="message-log"
                                  class="overflow-auto"
                                  style="max-height: 300px"
                                >
                                  <div
                                    v-if="messageLogs.length === 0"
                                    class="text-center py-4 text-muted"
                                  >
                                    <i class="bi bi-chat-dots" style="font-size: 2rem"></i>
                                    <p class="mt-2">No activity yet. Send a message to see logs.</p>
                                  </div>
                                  <div
                                    v-for="(msg, index) in messageLogs"
                                    :key="index"
                                    :class="['message', msg.key.fromMe ? 'message-sent' : 'message-received']"
                                  >
                                    {{ msg.message.conversation || "No message content" }}
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="card">
                              <div class="card-header">
                                <h5 class="card-title m-0">Message Preview</h5>
                              </div>
                              <div class="card-body">
                                <div class="mb-2" id="preview-recipient">
                                  <strong>To:</strong> <span id="preview-to">-</span>
                                </div>
                                <div class="p-3 bg-light rounded" id="preview-content">
                                  <em class="text-muted">Your message will appear here...</em>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        class="tab-pane"
                        id="messages"
                        role="tabpanel"
                        aria-labelledby="messages-tab"
                      >
                        <div class="row">
                          <div class="col-md-5">
                            <div class="card">
                              <div class="card-header">
                                <h5>Send Media</h5>
                              </div>
                              <div class="card-body">
                                <form @submit.prevent="sendMedia" id="media-form">
                                  <div class="mb-3">
                                    <label for="media-phone" class="form-label">Phone Number</label>
                                    <input
                                      type="text"
                                      class="form-control"
                                      id="media-phone"
                                      v-model="mediaForm.phone"
                                      placeholder="+1234567890"
                                      required
                                    />
                                  </div>
                                  <div class="mb-3">
                                    <label for="media-type" class="form-label">Media Type</label>
                                    <select
                                      class="form-select"
                                      id="media-type"
                                      v-model="mediaForm.mediaType"
                                    >
                                      <option value="image">Image</option>
                                      <option value="video">Video</option>
                                      <option value="audio">Audio</option>
                                      <option value="document">Document</option>
                                    </select>
                                  </div>
                                  <div class="mb-3">
                                    <label for="media-caption" class="form-label"
                                      >Caption (Optional)</label
                                    >
                                    <input
                                      type="text"
                                      class="form-control"
                                      id="media-caption"
                                      v-model="mediaForm.caption"
                                    />
                                  </div>
                                  <div class="mb-3">
                                    <label for="media-file" class="form-label"
                                      >Upload Media File</label
                                    >
                                    <input
                                      type="file"
                                      class="form-control"
                                      id="media-file"
                                      @change="handleFileChange"
                                    />
                                  </div>
                                  <div class="mb-3">
                                    <label for="media-url" class="form-label"
                                      >Or Enter Media URL</label
                                    >
                                    <input
                                      type="text"
                                      class="form-control"
                                      id="media-url"
                                      v-model="mediaForm.mediaUrl"
                                      @input="handleUrlInput"
                                    />
                                  </div>
                                  <div class="card mb-3">
                                    <div class="card-header">
                                      <h6 class="mb-0">Media Preview</h6>
                                    </div>
                                    <div class="card-body text-center">
                                      <div
                                        id="media-preview-placeholder"
                                        v-show="!showMediaPreview"
                                      >
                                        <i
                                          class="bi bi-image"
                                          style="font-size: 3rem; color: #ccc"
                                        ></i>
                                        <p class="text-muted mt-2">
                                          Select or enter media to preview
                                        </p>
                                      </div>
                                      <div
                                        id="media-preview-content"
                                        v-show="showMediaPreview"
                                        v-html="mediaPreviewContent"
                                      ></div>
                                      <div
                                        id="media-file-info"
                                        class="mt-3 text-start"
                                        v-show="showMediaPreview"
                                      >
                                        <p>
                                          <strong>Name:</strong>
                                          <span id="media-file-name">{{ mediaFileInfo.name }}</span>
                                        </p>
                                        <p>
                                          <strong>Size:</strong>
                                          <span id="media-file-size">{{ mediaFileInfo.size }}</span>
                                        </p>
                                        <p>
                                          <strong>Type:</strong>
                                          <span id="media-file-type">{{ mediaFileInfo.type }}</span>
                                        </p>
                                      </div>
                                    </div>
                                  </div>
                                  <button type="submit" class="btn btn-primary">Send Media</button>
                                  <button
                                    type="reset"
                                    class="btn btn-secondary ms-2"
                                    @click="clearMediaPreview"
                                  >
                                    Reset
                                  </button>
                                </form>
                              </div>
                            </div>
                          </div>

                          <!-- Media Preview Column -->
                          <div class="col-md-7">
                            <div class="card">
                              <div class="card-header">
                                <h5 class="card-title m-0">Media Preview</h5>
                              </div>
                              <div class="card-body">
                                <div
                                  id="media-preview-container"
                                  class="text-center p-3 bg-light rounded"
                                >
                                  <div id="media-preview-placeholder">
                                    <i class="bi bi-file-earmark-plus media-file-icon"></i>
                                    <p class="mt-2 text-muted">Select a file to preview</p>
                                  </div>
                                  <div id="media-preview-content" style="display: none">
                                    <!-- Preview content will be inserted here -->
                                  </div>
                                  <div id="media-file-info" style="display: none">
                                    <div class="d-flex justify-content-between">
                                      <span id="media-file-name" class="text-truncate"></span>
                                      <span id="media-file-size" class="text-muted"></span>
                                    </div>
                                    <div id="media-file-type" class="text-muted small"></div>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                      <div
                        class="tab-pane"
                        id="profile"
                        role="tabpanel"
                        aria-labelledby="profile-tab"
                      >
                        <!-- Schedule Message -->
                        <div class="row">
                          <div class="col-md-5">
                            <div class="card">
                              <div class="card-header pb-0 border-bottom-0">
                                <!-- Nav tabs -->
                                <ul
                                  class="nav nav-tabs nav-fill nav-justified"
                                  id="schedule-tabs"
                                  role="tablist"
                                >
                                  <li class="nav-item" role="presentation">
                                    <button
                                      class="nav-link active"
                                      id="schedule-single-tab"
                                      data-bs-toggle="tab"
                                      data-bs-target="#schedule-single"
                                      type="button"
                                      role="tab"
                                      aria-controls="home"
                                      aria-selected="true"
                                    >
                                      Schedule Message
                                    </button>
                                  </li>
                                  <li class="nav-item" role="presentation">
                                    <button
                                      class="nav-link"
                                      id="schedule-bulk-tab"
                                      data-bs-toggle="tab"
                                      data-bs-target="#schedule-bulk"
                                      type="button"
                                      role="tab"
                                      aria-controls="profile"
                                      aria-selected="false"
                                    >
                                      Schedule Bulk
                                    </button>
                                  </li>
                                </ul>
                              </div>
                              <!-- Tab panes -->
                              <div class="tab-content">
                                <div
                                  class="tab-pane active"
                                  id="schedule-single"
                                  role="tabpanel"
                                  aria-labelledby="home-tab"
                                >
                                  <div class="card-body">
                                    <form @submit.prevent="scheduleMessage" id="schedule-form">
                                      <div class="mb-3">
                                        <label for="schedule-phone" class="form-label"
                                          >Phone Number</label
                                        >
                                        <input
                                          type="text"
                                          class="form-control"
                                          id="schedule-phone"
                                          v-model="scheduleForm.phone"
                                          placeholder="+1234567890"
                                          required
                                        />
                                      </div>
                                      <div class="mb-3">
                                        <label for="schedule-message" class="form-label"
                                          >Message</label
                                        >
                                        <textarea
                                          class="form-control"
                                          id="schedule-message"
                                          v-model="scheduleForm.message"
                                          rows="3"
                                          required
                                        ></textarea>
                                      </div>
                                      <div class="mb-3">
                                        <label for="scheduled-time" class="form-label"
                                          >Schedule Time</label
                                        >
                                        <input
                                          type="datetime-local"
                                          class="form-control"
                                          id="scheduled-time"
                                          v-model="scheduleForm.scheduledTime"
                                          required
                                        />
                                      </div>
                                      <div class="mb-3 form-check">
                                        <input
                                          type="checkbox"
                                          class="form-check-input"
                                          id="isRecurring"
                                          v-model="scheduleForm.isRecurring"
                                        />
                                        <label class="form-check-label" for="isRecurring"
                                          >Set as recurring</label
                                        >
                                      </div>
                                      <div
                                        id="recurringOptions"
                                        v-show="scheduleForm.isRecurring"
                                        class="mb-3 ps-4 border-start"
                                      >
                                        <div class="mb-3">
                                          <div class="form-check">
                                            <input
                                              class="form-check-input"
                                              type="radio"
                                              name="recurringType"
                                              id="daily"
                                              value="daily"
                                              v-model="scheduleForm.recurringType"
                                            />
                                            <label class="form-check-label" for="daily"
                                              >Daily</label
                                            >
                                          </div>
                                          <div class="form-check">
                                            <input
                                              class="form-check-input"
                                              type="radio"
                                              name="recurringType"
                                              id="weekly"
                                              value="weekly"
                                              v-model="scheduleForm.recurringType"
                                            />
                                            <label class="form-check-label" for="weekly"
                                              >Weekly</label
                                            >
                                          </div>
                                          <div class="form-check">
                                            <input
                                              class="form-check-input"
                                              type="radio"
                                              name="recurringType"
                                              id="monthly"
                                              value="monthly"
                                              v-model="scheduleForm.recurringType"
                                            />
                                            <label class="form-check-label" for="monthly"
                                              >Monthly</label
                                            >
                                          </div>
                                          <div class="form-check">
                                            <input
                                              class="form-check-input"
                                              type="radio"
                                              name="recurringType"
                                              id="custom"
                                              value="custom"
                                              v-model="scheduleForm.recurringType"
                                            />
                                            <label class="form-check-label" for="custom"
                                              >Custom Days</label
                                            >
                                          </div>
                                        </div>
                                        <div
                                          id="customDaysSelection"
                                          v-show="scheduleForm.recurringType === 'custom'"
                                          class="mb-3"
                                        >
                                          <label class="form-label">Select Days:</label>
                                          <div class="d-flex flex-wrap gap-2">
                                            <div
                                              v-for="day in daysList"
                                              :key="day"
                                              class="form-check"
                                            >
                                              <input
                                                class="form-check-input"
                                                type="checkbox"
                                                :id="'day-' + day"
                                                v-model="scheduleForm.selectedDays[day]"
                                              />
                                              <label class="form-check-label" :for="'day-' + day">{{
                                                capitalizeFirstLetter(day)
                                              }}</label>
                                            </div>
                                          </div>
                                        </div>
                                        <div class="mb-3">
                                          <label for="endDate" class="form-label"
                                            >End Date (Optional)</label
                                          >
                                          <input
                                            type="date"
                                            class="form-control"
                                            id="endDate"
                                            v-model="scheduleForm.endDate"
                                          />
                                        </div>
                                      </div>
                                      <button type="submit" class="btn btn-primary">
                                        Schedule Message
                                      </button>
                                    </form>
                                  </div>
                                </div>
                                <div
                                  class="tab-pane"
                                  id="schedule-bulk"
                                  role="tabpanel"
                                  aria-labelledby="schedule-bulk-tab"
                                >
                                  <div class="card-body">
                                    <form id="bulkMessageForm" @submit.prevent="submitForm">
                                      <div class="mb-1">
                                        <label for="excelFile" class="form-label"
                                          >Upload Excel File</label
                                        >
                                        <input
                                          class="form-control"
                                          type="file"
                                          id="excelFile"
                                          accept=".xlsx,.xls"
                                          @change="handleFileUpload"
                                        />
                                        <small class="text-muted"
                                          >Required columns: to, name. Optional: message,
                                          scheduledTime</small
                                        >
                                      </div>

                                      <div class="mb-1">
                                        <label for="template" class="form-label"
                                          >Message Template</label
                                        >
                                        <small
                                          class="text-muted badge"
                                          v-html="parametersInfo"
                                        ></small>
                                        <textarea
                                          v-model="template"
                                          id="template"
                                          class="form-control"
                                          rows="4"
                                          placeholder="hello {{ name }}"
                                        ></textarea>
                                      </div>

                                      <div class="mb-1">
                                        <label class="form-label mb-0 control-label"
                                          >Time Settings</label
                                        >
                                        <div class="row g-1">
                                          <div class="col-md-3 col-6">
                                            <label for="minHour" class="form-label"
                                              >Start Hour</label
                                            >
                                            <input
                                              type="number"
                                              id="minHour"
                                              v-model.number="timeConfig.minHour"
                                              class="form-control form-control-sm"
                                              min="0"
                                              max="23"
                                            />
                                          </div>
                                          <div class="col-md-3 col-6">
                                            <label for="maxHour" class="form-label">End Hour</label>
                                            <input
                                              type="number"
                                              id="maxHour"
                                              v-model.number="timeConfig.maxHour"
                                              class="form-control form-control-sm"
                                              min="0"
                                              max="23"
                                            />
                                          </div>
                                          <div class="col-md-3 col-6">
                                            <label for="minMinute" class="form-label"
                                              >Start Minute</label
                                            >
                                            <input
                                              type="number"
                                              id="minMinute"
                                              v-model.number="timeConfig.minMinute"
                                              class="form-control form-control-sm"
                                              min="0"
                                              max="59"
                                            />
                                          </div>
                                          <div class="col-md-3 col-6">
                                            <label for="maxMinute" class="form-label"
                                              >End Minute</label
                                            >
                                            <input
                                              type="number"
                                              id="maxMinute"
                                              v-model.number="timeConfig.maxMinute"
                                              class="form-control form-control-sm"
                                              min="0"
                                              max="59"
                                            />
                                          </div>
                                        </div>
                                      </div>

                                      <!-- Hidden fields -->
                                      <input
                                        type="hidden"
                                        name="datajson"
                                        :value="JSON.stringify(excelData)"
                                      />
                                      <input
                                        type="hidden"
                                        name="timeConfig"
                                        :value="JSON.stringify(timeConfig)"
                                      />

                                      <div class="mb-1">
                                        <div
                                          class="alert alert-info p-1 text-center"
                                          v-if="showUploadInfo"
                                        >
                                          <small>{{ fileDetails }}</small>
                                        </div>
                                        <div
                                          class="alert alert-danger"
                                          v-if="errorMessage"
                                          v-html="errorMessage"
                                        ></div>
                                      </div>

                                      <div
                                        class="d-flex justify-content-end align-items-center gap-2 mt-3"
                                      >
                                        <button
                                          type="submit"
                                          class="btn btn-primary"
                                          :disabled="isSubmitDisabled"
                                        >
                                          Schedule Messages
                                        </button>
                                        <button
                                          type="button"
                                          class="btn btn-secondary"
                                          @click="resetForm"
                                        >
                                          Reset
                                        </button>
                                      </div>
                                    </form>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                          <div class="col-md-7">
                            <!-- Preview Table -->
                            <div class="mb-3" v-if="showPreview">
                              <div class="card" id="previewCard">
                                <div class="card-header">
                                  <h5>Message Preview</h5>
                                </div>
                                <div class="card-body p-0">
                                  <div class="table-responsive">
                                    <table class="table table-striped">
                                      <thead>
                                        <tr>
                                          <th>#</th>
                                          <th>Phone</th>
                                          <th>Name</th>
                                          <th>Message</th>
                                          <th>Scheduled Time</th>
                                        </tr>
                                      </thead>
                                      <tbody id="previewBody">
                                        <tr v-for="(row, index) in previewData" :key="index">
                                          <td>{{ index + 1 }}</td>
                                          <td>{{ row.phone }}</td>
                                          <td>{{ row.name }}</td>
                                          <td>{{ row.message }}</td>
                                          <td>{{ row.scheduledTime }}</td>
                                        </tr>
                                      </tbody>
                                    </table>
                                  </div>
                                </div>
                              </div>
                            </div>
                            <div class="card">
                              <div class="card-header">
                                <div class="d-flex justify-content-between align-items-center">
                                  <h5 class="mb-0">Schedule Messages</h5>
                                  <button
                                    class="btn btn-sm btn-outline-secondary"
                                    @click="loadScheduledMessages"
                                  >
                                    <i class="bi bi-arrow-clockwise"></i> Refresh
                                  </button>
                                </div>
                              </div>
                              <div class="card-body p-0">
                                <div class="table-responsive">
                                  <table class="table table-striped">
                                    <thead>
                                      <tr>
                                        <th>To</th>
                                        <th>Message</th>
                                        <th>Time</th>
                                        <th>Actions</th>
                                      </tr>
                                    </thead>
                                    <tbody id="scheduled-messages">
                                      <tr v-if="scheduledMessages.length === 0">
                                        <td colspan="4" class="text-center">
                                          No scheduled messages.
                                        </td>
                                      </tr>
                                      <tr v-for="msg in scheduledMessages" :key="msg.id">
                                        <td>{{ msg.to.replace("@s.whatsapp.net", "") }}</td>
                                        <td>{{ msg.message }}</td>
                                        <td>{{ formatDateTime(msg.scheduledTime) }}</td>
                                        <td>
                                          <button
                                            class="btn btn-sm btn-warning me-2"
                                            @click="editScheduledMessage(msg.id)"
                                          >
                                            <i class="bi bi-pencil"></i>
                                          </button>
                                          <button
                                            class="btn btn-sm btn-danger"
                                            @click="deleteScheduledMessage(msg.id)"
                                          >
                                            <i class="bi bi-trash"></i>
                                          </button>
                                        </td>
                                      </tr>
                                    </tbody>
                                  </table>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Logs Tab -->
              <div class="tab-pane fade" id="logs" role="tabpanel">
                <div class="card">
                  <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="card-title m-0">Activity Logs</h5>
                    <button class="btn btn-sm btn-outline-secondary" id="clear-logs">
                      <i class="bi bi-trash"></i> Clear Logs
                    </button>
                  </div>
                  <div class="card-body">
                    <div class="message-log d-flex flex-column" id="message-log">
                      <div class="text-center py-4 text-muted">
                        <i class="bi bi-chat-dots" style="font-size: 2rem"></i>
                        <p class="mt-2">No activity yet. Send a message to see logs.</p>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              <!-- Settings Tab -->
              <div class="tab-pane fade" id="settings" role="tabpanel">
                <div class="card">
                  <div class="card-header">
                    <h5 class="card-title m-0">Session Settings</h5>
                  </div>
                  <div class="card-body">
                    <div
                      class="d-flex justify-content-between align-items-center border-bottom pb-3 mb-3"
                    >
                      <div>
                        <h6 class="m-0">Logout Session</h6>
                        <p class="text-muted m-0">
                          Disconnect this WhatsApp session but keep its data
                        </p>
                      </div>
                      <button class="btn btn-warning" id="logout-btn">
                        <i class="bi bi-box-arrow-right"></i> Logout
                      </button>
                    </div>
                    <div class="d-flex justify-content-between align-items-center">
                      <div>
                        <h6 class="m-0">Delete Session</h6>
                        <p class="text-muted m-0">
                          Remove this session and all its data permanently
                        </p>
                      </div>
                      <button class="btn btn-danger" id="delete-btn">
                        <i class="bi bi-trash"></i> Delete
                      </button>
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Status Modal -->
      <div class="modal fade" id="statusModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="statusTitle">{{ statusTitle }}</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <p id="statusMessage">{{ statusMessage }}</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
            </div>
          </div>
        </div>
      </div>

      <!-- Delete Confirmation Modal -->
      <div class="modal fade" id="deleteModal" tabindex="-1" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title">Confirm Deletion</h5>
              <button
                type="button"
                class="btn-close"
                data-bs-dismiss="modal"
                aria-label="Close"
              ></button>
            </div>
            <div class="modal-body">
              <p>Are you sure you want to delete this session?</p>
            </div>
            <div class="modal-footer">
              <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">
                Cancel
              </button>
              <button
                type="button"
                class="btn btn-danger"
                id="confirm-delete"
                @click="deleteSession"
              >
                Delete
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script src="https://unpkg.com/vue@3.3.4/dist/vue.global.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script>
      const { createApp, ref, onMounted, computed, watch } = Vue;

      const app = createApp({
        setup() {
          // Constants and References
          const sessionId = "<%= sessionId %>";
          const socket = io();
          let statusModal = null;
          let deleteModal = null;

          // State variables
          const sessionConnected = ref(false);
          const qrCode = ref("");
          const statusTitle = ref("");
          const statusMessage = ref("");
          const messageLogs = ref([]);
          const scheduledMessages = ref([]);

          // Form data
          const messageForm = ref({
            phone: "",
            message: "",
          });

          const mediaForm = ref({
            phone: "",
            mediaType: "image",
            caption: "",
            mediaUrl: "",
            mediaFile: null,
          });

          const scheduleForm = ref({
            phone: "",
            message: "",
            scheduledTime: "",
            isRecurring: false,
            recurringType: "daily",
            selectedDays: {
              monday: false,
              tuesday: false,
              wednesday: false,
              thursday: false,
              friday: false,
              saturday: false,
              sunday: false,
            },
            endDate: "",
          });

          // Media preview
          const showMediaPreview = ref(false);
          const mediaPreviewContent = ref("");
          const mediaFileInfo = ref({
            name: "",
            size: "",
            type: "",
          });

          const daysList = [
            "monday",
            "tuesday",
            "wednesday",
            "thursday",
            "friday",
            "saturday",
            "sunday",
          ];

          const excelData = ref([]);
          const template = ref("");
          const timeConfig = ref({
            minHour: 9,
            maxHour: 17,
            minMinute: 0,
            maxMinute: 59,
          });
          const showUploadInfo = ref(false);
          const fileDetails = ref("");
          const errorMessage = ref("");
          const parametersInfo = ref("");
          const previewData = ref([]);

          // Computed properties
          const isSubmitDisabled = computed(() => {
            return !template.value.trim() || excelData.value.length === 0;
          });

          const showPreview = computed(() => {
            return excelData.value.length > 0 && template.value.trim() !== "";
          });

          // Methods
          function excelToJson(file) {
            return new Promise((resolve, reject) => {
              const reader = new FileReader();
              reader.readAsBinaryString(file);

              reader.onload = (event) => {
                try {
                  const data = event.target.result;
                  const workbook = XLSX.read(data, { type: "binary" });
                  const sheetName = workbook.SheetNames[0];
                  const sheet = workbook.Sheets[sheetName];
                  const json = XLSX.utils.sheet_to_json(sheet);

                  resolve(json);
                } catch (error) {
                  reject(error);
                }
              };

              reader.onerror = (error) => reject(error);
            });
          }

          function validateExcelData(data) {
            if (!Array.isArray(data) || data.length === 0) {
              return {
                isValid: false,
                errors: ["Excel file is empty or has no valid data"],
              };
            }

            const firstRow = data[0];
            const errors = [];

            // Check required columns
            const hasToColumn =
              "to" in firstRow || "phone" in firstRow || "number" in firstRow || "no" in firstRow;
            const hasNameColumn = "name" in firstRow || "nama" in firstRow;

            if (!hasToColumn) {
              errors.push("Missing required 'to' column (alternatives: 'phone', 'number', 'no')");
            }

            if (!hasNameColumn) {
              errors.push("Missing required 'name' column (alternative: 'nama')");
            }

            return {
              isValid: errors.length === 0,
              errors: errors,
            };
          }

          function renderTemplate(templateText, data) {
            return templateText.replace(/{{\s*(\w+)\s*}}/g, (match, key) => {
              return data[key] !== undefined ? data[key] : match;
            });
          }

          function getRandomTime(
            minHour = 0,
            maxHour = 23,
            minMinute = 0,
            maxMinute = 59,
            minSecond = 0,
            maxSecond = 59,
            minFutureMinutes = 3
          ) {
            // Get current time
            const now = new Date();

            // Calculate minimum allowed time (current time + minFutureMinutes minutes)
            const minTime = new Date(now.getTime() + minFutureMinutes * 60000);

            // Extract minimum required hours, minutes, seconds from minTime
            const minTimeHour = minTime.getHours();
            const minTimeMinute = minTime.getMinutes();
            const minTimeSecond = minTime.getSeconds();

            // Validate input ranges
            minHour = Math.max(0, Math.min(23, minHour));
            maxHour = Math.max(0, Math.min(23, maxHour));
            minMinute = Math.max(0, Math.min(59, minMinute));
            maxMinute = Math.max(0, Math.min(59, maxMinute));
            minSecond = Math.max(0, Math.min(59, minSecond));
            maxSecond = Math.max(0, Math.min(59, maxSecond));

            // Ensure min is not greater than max
            if (minHour > maxHour) [minHour, maxHour] = [maxHour, minHour];
            if (minMinute > maxMinute) [minMinute, maxMinute] = [maxMinute, minMinute];
            if (minSecond > maxSecond) [minSecond, maxSecond] = [maxSecond, minSecond];

            // Adjust min values to ensure we're not below the current time + offset
            if (minTimeHour > minHour) {
              minHour = minTimeHour;
            } else if (minTimeHour === minHour) {
              if (minTimeMinute > minMinute) {
                minMinute = minTimeMinute;
              } else if (minTimeMinute === minMinute) {
                if (minTimeSecond > minSecond) {
                  minSecond = minTimeSecond;
                }
              }
            }

            // If min values are now greater than max values, adjust max values
            if (minHour > maxHour) {
              // Can't satisfy both constraints, so prioritize the future time requirement
              maxHour = Math.min(23, minHour);
            }
            if (minHour === maxHour && minMinute > maxMinute) {
              maxMinute = Math.min(59, minMinute);
            }
            if (minHour === maxHour && minMinute === maxMinute && minSecond > maxSecond) {
              maxSecond = Math.min(59, minSecond);
            }

            // Generate random components within the adjusted ranges
            const hours = String(
              Math.floor(minHour + Math.random() * (maxHour - minHour + 1))
            ).padStart(2, "0");

            // Handle minutes based on hour selection
            let minutes;
            if (parseInt(hours) === minHour) {
              minutes = String(
                Math.floor(minMinute + Math.random() * (maxMinute - minMinute + 1))
              ).padStart(2, "0");
            } else {
              minutes = String(
                Math.floor(minMinute + Math.random() * (maxMinute - minMinute + 1))
              ).padStart(2, "0");
            }

            // Handle seconds based on hour and minute selection
            let seconds;
            if (parseInt(hours) === minHour && parseInt(minutes) === minMinute) {
              seconds = String(
                Math.floor(minSecond + Math.random() * (maxSecond - minSecond + 1))
              ).padStart(2, "0");
            } else {
              seconds = String(
                Math.floor(minSecond + Math.random() * (maxSecond - minSecond + 1))
              ).padStart(2, "0");
            }

            return `${hours}:${minutes}:${seconds}`;
          }

          function updatePreview() {
            if (excelData.value.length === 0) return;

            const data = [];
            const previewLimit = Math.min(10, excelData.value.length);

            // Get time settings
            const minHour = timeConfig.value.minHour;
            const maxHour = timeConfig.value.maxHour;
            const minMinute = timeConfig.value.minMinute;
            const maxMinute = timeConfig.value.maxMinute;

            for (let i = 0; i < previewLimit; i++) {
              const row = excelData.value[i];
              const processedRow = {};

              // Process the phone number field (accept various column names)
              if (row.to) processedRow.phone = row.to;
              else if (row.phone) processedRow.phone = row.phone;
              else if (row.number) processedRow.phone = row.number;
              else if (row.no) processedRow.phone = row.no;

              // Process the name field
              if (row.name) processedRow.name = row.name;
              else if (row.nama) processedRow.name = row.nama;

              // Process message template
              if (row.message) {
                processedRow.message = row.message;
              } else {
                processedRow.message = renderTemplate(template.value, row);
              }

              // Process scheduled time
              if (row.scheduledTime) {
                processedRow.scheduledTime = row.scheduledTime;
              } else {
                // Generate random time within configured hours
                processedRow.scheduledTime = getRandomTime(minHour, maxHour, minMinute, maxMinute);
              }

              data.push(processedRow);
            }

            previewData.value = data;
          }

          function resetForm() {
            excelData.value = [];
            template.value = "";
            showUploadInfo.value = false;
            fileDetails.value = "";
            errorMessage.value = "";
            previewData.value = [];
            document.getElementById("excelFile").value = "";
          }

          async function submitForm() {
            if (isSubmitDisabled.value) return;

            try {
              console.log("excelData.value", excelData.value);
              // Process all records
              const processedData = excelData.value.map((row) => {
                const processedRow = {};

                // Process the phone number field (accept various column names)
                if (row.to) processedRow.to = row.to;
                else if (row.phone) processedRow.to = row.phone;
                else if (row.number) processedRow.to = row.number;
                else if (row.no) processedRow.to = row.no;

                // Process the name field
                if (row.name) processedRow.name = row.name;
                else if (row.nama) processedRow.name = row.nama;

                // Process message template
                if (row.message) {
                  processedRow.message = row.message;
                } else {
                  processedRow.message = renderTemplate(template.value, row);
                }

                // Process scheduled time
                if (row.scheduledTime) {
                  processedRow.scheduledTime = row.scheduledTime;
                } else {
                  // Generate random time within configured hours
                  processedRow.scheduledTime = getRandomTime(
                    timeConfig.value.minHour,
                    timeConfig.value.maxHour,
                    timeConfig.value.minMinute,
                    timeConfig.value.maxMinute
                  );
                }

                return processedRow;
              });

              console.log("processedData", processedData);

              const payload = {
                datajson: JSON.stringify(processedData),
                timeConfig: JSON.stringify(timeConfig.value),
                template: template.value,
              };

              // Submit the form (you would normally use fetch or axios here)
              const response = await fetch(`/session/${sessionId}/bulk-message`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
              });

              if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
              }

              const result = await response.json();

              // Handle success response
              showStatusModal(
                "Success",
                `Successfully scheduled ${processedData.length} messages!`
              );
              loadScheduledMessages();
              resetForm();
            } catch (error) {
              console.error("Error submitting form:", error);
              errorMessage.value = `Error submitting form: ${error.message}`;
            }
          }

          // Watch for changes to template to update preview
          watch(template, () => {
            if (excelData.value.length > 0) {
              updatePreview();
            }
          });

          // Watch for changes to time config to update preview
          watch(
            timeConfig,
            () => {
              if (excelData.value.length > 0 && previewData.value.length > 0) {
                updatePreview();
              }
            },
            { deep: true }
          );

          async function handleFileUpload(event) {
            const file = event.target.files[0];
            if (!file) return;

            try {
              const data = await excelToJson(file);
              const validation = validateExcelData(data);

              if (validation.isValid) {
                excelData.value = data;

                // Get all unique keys from all objects
                const allKeys = [...new Set(data.flatMap((obj) => Object.keys(obj)))];

                // check if certain keys are missing
                const requiredKeys = ["to"];
                const missingKeys = requiredKeys.filter(
                  (key) => !allKeys.includes(key.toLowerCase())
                );
                if (missingKeys.length > 0) {
                  errorMessage.value = `<strong>Excel validation failed:</strong><ul>${missingKeys
                    .map(
                      (key) =>
                        `<li><small>Column <b><u>${key}</u></b> is missing, please add it (or rename it) to the Excel file</small></li>`
                    )
                    .join("")}</ul>`;
                  showUploadInfo.value = false;
                  return;
                }

                // Format parameters info
                parametersInfo.value = `Use ${allKeys
                  .map((key) => `{{ ${key} }}`)
                  .join(", ")} in message template.`;

                fileDetails.value = `Loaded ${data.length} records from "${file.name}"`;
                showUploadInfo.value = true;
                errorMessage.value = "";

                // Update preview if template exists
                if (template.value.trim()) {
                  updatePreview();
                }
              } else {
                errorMessage.value = `<strong>Excel validation failed:</strong><ul>${validation.errors
                  .map((err) => `<li>${err}</li>`)
                  .join("")}</ul>`;
                showUploadInfo.value = false;
              }
            } catch (error) {
              console.error("Error processing Excel file:", error);
              errorMessage.value = `Error processing Excel file: ${error.message}`;
              showUploadInfo.value = false;
            }
          }
          // Format file size
          const formatFileSize = (bytes) => {
            if (bytes === 0) return "0 Bytes";
            const k = 1024;
            const sizes = ["Bytes", "KB", "MB", "GB"];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + " " + sizes[i];
          };

          // Format date time
          const formatDateTime = (dateTimeStr) => {
            return new Date(dateTimeStr).toLocaleString();
          };

          // Capitalize first letter
          const capitalizeFirstLetter = (string) => {
            return string.charAt(0).toUpperCase() + string.slice(1);
          };

          // Load session info
          const loadSessionInfo = async () => {
            try {
              const response = await fetch("/api/sessions");
              const data = await response.json();

              if (data.success) {
                const session = data.data.find((s) => s.id === sessionId);
                if (session) {
                  sessionConnected.value = session.connected;
                }
              }
            } catch (error) {
              console.error("Error loading session info:", error);
            }
          };

          // Load scheduled messages
          const loadScheduledMessages = async () => {
            try {
              const response = await fetch(`/api/schedule-messages/${sessionId}`);
              const data = await response.json();
              if (data.success) {
                scheduledMessages.value = data.data;
              } else {
                throw new Error(data.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Show status modal
          const showStatusModal = (title, message) => {
            statusTitle.value = title;
            statusMessage.value = message;
            statusModal.show();
          };

          // Show delete modal
          const showDeleteModal = () => {
            deleteModal.show();
          };

          // Clear logs
          const clearLogs = () => {
            messageLogs.value = [];
          };

          // Send message
          const sendMessage = async () => {
            try {
              const response = await fetch(`/api/send-message/${sessionId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({
                  to: messageForm.value.phone,
                  message: messageForm.value.message,
                }),
              });
              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Message sent successfully.");
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Handle file change
          const handleFileChange = (event) => {
            const file = event.target.files[0];
            if (file) {
              mediaForm.value.mediaFile = file;
              mediaForm.value.mediaUrl = ""; // Clear URL input
              showMediaPreview.value = true;

              // Update file info
              mediaFileInfo.value = {
                name: file.name,
                size: formatFileSize(file.size),
                type: file.type,
              };

              // Create preview based on file type
              if (file.type.startsWith("image/")) {
                mediaPreviewContent.value = `<img src="${URL.createObjectURL(
                  file
                )}" class="img-fluid">`;
              } else if (file.type.startsWith("video/")) {
                mediaPreviewContent.value = `<video src="${URL.createObjectURL(
                  file
                )}" controls class="img-fluid"></video>`;
              } else if (file.type.startsWith("audio/")) {
                mediaPreviewContent.value = `<audio src="${URL.createObjectURL(
                  file
                )}" controls class="w-100"></audio>`;
              } else {
                mediaPreviewContent.value = `
                <i class="bi bi-file-earmark-text media-file-icon"></i>
                <p class="mt-2">${file.type || "Document"}</p>
              `;
              }
            } else {
              clearMediaPreview();
            }
          };

          // Handle URL input
          const handleUrlInput = () => {
            if (mediaForm.value.mediaUrl) {
              // Clear file input
              mediaForm.value.mediaFile = null;
              const fileInput = document.getElementById("media-file");
              if (fileInput) fileInput.value = "";

              showMediaPreview.value = true;
              const url = mediaForm.value.mediaUrl;
              const mediaType = mediaForm.value.mediaType;

              // Update file info
              mediaFileInfo.value = {
                name: url.split("/").pop() || "Remote file",
                size: "Unknown size",
                type: mediaType,
              };

              // Create preview based on media type
              if (mediaType === "image") {
                mediaPreviewContent.value = `<img src="${url}" class="img-fluid" onerror="this.onerror=null;this.style.display='none';this.insertAdjacentHTML('afterend', '<p class=\'text-danger\'>Unable to preview image URL</p>');">`;
              } else if (mediaType === "video") {
                mediaPreviewContent.value = `
                <i class="bi bi-film media-file-icon"></i>
                <p class="mt-2">Video URL (preview not available)</p>
              `;
              } else if (mediaType === "audio") {
                mediaPreviewContent.value = `
                <i class="bi bi-music-note-beamed media-file-icon"></i>
                <p class="mt-2">Audio URL (preview not available)</p>
              `;
              } else {
                mediaPreviewContent.value = `
                <i class="bi bi-file-earmark-text media-file-icon"></i>
                <p class="mt-2">Document URL (preview not available)</p>
              `;
              }
            } else if (!mediaForm.value.mediaFile) {
              clearMediaPreview();
            }
          };

          // Clear media preview
          const clearMediaPreview = () => {
            showMediaPreview.value = false;
            mediaPreviewContent.value = "";
            mediaFileInfo.value = {
              name: "",
              size: "",
              type: "",
            };
            mediaForm.value.mediaFile = null;
            mediaForm.value.mediaUrl = "";
          };

          // Send media
          const sendMedia = async () => {
            try {
              let response;

              // Check if a file is selected
              if (mediaForm.value.mediaFile) {
                // Use FormData for file upload
                const formData = new FormData();
                formData.append("to", mediaForm.value.phone);
                formData.append("caption", mediaForm.value.caption);
                formData.append("media", mediaForm.value.mediaFile);

                response = await fetch(`/api/send-media/${sessionId}`, {
                  method: "POST",
                  body: formData,
                });
              } else {
                // Use JSON for URL-based media
                if (!mediaForm.value.mediaUrl || !mediaForm.value.mediaType) {
                  throw new Error("Please provide either a file or a media URL with type");
                }

                response = await fetch(`/api/send-media/${sessionId}`, {
                  method: "POST",
                  headers: { "Content-Type": "application/json" },
                  body: JSON.stringify({
                    to: mediaForm.value.phone,
                    mediaUrl: mediaForm.value.mediaUrl,
                    mediaType: mediaForm.value.mediaType,
                    caption: mediaForm.value.caption,
                  }),
                });
              }

              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Media sent successfully.");
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Schedule message
          const scheduleMessage = async () => {
            let payload = {
              to: scheduleForm.value.phone,
              message: scheduleForm.value.message,
              scheduledTime: scheduleForm.value.scheduledTime,
            };

            // Add recurring options if selected
            if (scheduleForm.value.isRecurring) {
              const recurringType = scheduleForm.value.recurringType;
              let recurringOptions = {
                type: recurringType,
              };

              // If custom days are selected, add them to the options
              if (recurringType === "custom") {
                const selectedDays = Object.keys(scheduleForm.value.selectedDays).filter(
                  (day) => scheduleForm.value.selectedDays[day]
                );

                if (selectedDays.length === 0) {
                  showStatusModal(
                    "Error",
                    "Please select at least one day for custom recurring schedule"
                  );
                  return;
                }

                recurringOptions.days = selectedDays;
              }

              // Add end date if specified
              if (scheduleForm.value.endDate) {
                recurringOptions.endDate = scheduleForm.value.endDate
                  ? new Date(scheduleForm.value.endDate).toISOString()
                  : null;
              }

              payload.recurringOptions = recurringOptions;
            }

            try {
              const response = await fetch(`/api/schedule-message/${sessionId}`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(payload),
              });
              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Message scheduled successfully.");
                loadScheduledMessages();
                // Reset form
                scheduleForm.value = {
                  phone: "",
                  message: "",
                  scheduledTime: "",
                  isRecurring: false,
                  recurringType: "daily",
                  selectedDays: {
                    monday: false,
                    tuesday: false,
                    wednesday: false,
                    thursday: false,
                    friday: false,
                    saturday: false,
                    sunday: false,
                  },
                  endDate: "",
                };
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Edit scheduled message
          const editScheduledMessage = async (messageId) => {
            try {
              const message = scheduledMessages.value.find((msg) => msg.id === messageId);
              if (message) {
                // Populate form with existing data using prompts (this should be replaced with a proper modal)
                const newTo = prompt(
                  "Enter new phone number:",
                  message.to.replace("@s.whatsapp.net", "")
                );
                if (newTo === null) return; // Cancelled

                const newMessage = prompt("Enter new message:", message.message);
                if (newMessage === null) return; // Cancelled

                const newScheduledTime = prompt(
                  "Enter new scheduled time (YYYY-MM-DDTHH:MM):",
                  message.scheduledTime.slice(0, 16)
                );
                if (newScheduledTime === null) return; // Cancelled

                // Send update request
                const updateResponse = await fetch(
                  `/api/schedule-message/${sessionId}/${messageId}`,
                  {
                    method: "PUT",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify({
                      to: newTo,
                      message: newMessage,
                      scheduledTime: newScheduledTime,
                    }),
                  }
                );

                const updateResult = await updateResponse.json();
                if (updateResult.success) {
                  showStatusModal("Success", "Scheduled message updated successfully.");
                  loadScheduledMessages();
                } else {
                  throw new Error(updateResult.error);
                }
              } else {
                throw new Error("Scheduled message not found");
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Delete scheduled message
          const deleteScheduledMessage = async (messageId) => {
            try {
              const response = await fetch(`/api/schedule-message/${sessionId}/${messageId}`, {
                method: "DELETE",
              });
              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Scheduled message deleted successfully.");
                loadScheduledMessages();
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Logout session
          const logoutSession = async () => {
            try {
              const response = await fetch(`/api/sessions/${sessionId}/logout`, {
                method: "POST",
              });
              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Session logged out successfully.");
                sessionConnected.value = false;
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Delete session
          const deleteSession = async () => {
            try {
              const response = await fetch(`/api/sessions/${sessionId}`, {
                method: "DELETE",
              });
              const result = await response.json();
              if (result.success) {
                showStatusModal("Success", "Session deleted successfully.");
                // Redirect to home after a short delay
                setTimeout(() => {
                  window.location.href = "/";
                }, 2000);
              } else {
                throw new Error(result.error);
              }
            } catch (error) {
              showStatusModal("Error", error.message);
            }
          };

          // Socket.io event handlers
          onMounted(() => {
            // Initialize Bootstrap modals
            statusModal = new bootstrap.Modal(document.getElementById("statusModal"));
            deleteModal = new bootstrap.Modal(document.getElementById("deleteModal"));

            // Load initial data
            loadSessionInfo();
            loadScheduledMessages();

            // Set up socket listeners
            socket.on(`qr.${sessionId}`, (data) => {
              qrCode.value = data.qrCode;
            });

            socket.on(`session.${sessionId}.connected`, (data) => {
              sessionConnected.value = data.connected;
            });

            socket.on("session.update", (data) => {
              if (data.action === "remove" && data.sessionId === sessionId) {
                alert("Session has been removed.");
                window.location.href = "/";
              } else if (data.action === "update" && data.session.id === sessionId) {
                // Update session info if needed
              }
            });

            socket.on(`${sessionId}.message`, (message) => {
              messageLogs.value = message.messages.map((msg) => msg).reverse();
            });
          });

          return {
            // State
            sessionConnected,
            qrCode,
            statusTitle,
            statusMessage,
            messageLogs,
            scheduledMessages,
            messageForm,
            mediaForm,
            scheduleForm,
            showMediaPreview,
            mediaPreviewContent,
            mediaFileInfo,
            daysList,

            // Methods
            sendMessage,
            handleFileChange,
            handleUrlInput,
            clearMediaPreview,
            sendMedia,
            scheduleMessage,
            loadScheduledMessages,
            editScheduledMessage,
            deleteScheduledMessage,
            showDeleteModal,
            deleteSession,
            logoutSession,
            clearLogs,
            formatDateTime,
            capitalizeFirstLetter,

            // bulk message
            excelData,
            template,
            timeConfig,
            showUploadInfo,
            fileDetails,
            errorMessage,
            parametersInfo,
            isSubmitDisabled,
            showPreview,
            previewData,
            handleFileUpload,
            resetForm,
            submitForm,
          };
        },
      }).mount("#app");
    </script>
  </body>
</html>
