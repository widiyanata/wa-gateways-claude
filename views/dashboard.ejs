<!-- views/dashboard.ejs -->
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title><%= title %></title>
    <link
      href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css"
      rel="stylesheet"
    />
    <link
      rel="stylesheet"
      href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.5/font/bootstrap-icons.css"
    />
    <style>
      .session-card {
        transition: all 0.3s;
      }
      .session-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 10px 20px rgba(0, 0, 0, 0.1);
      }
      .online-indicator {
        width: 10px;
        height: 10px;
        border-radius: 50%;
        display: inline-block;
        margin-right: 5px;
      }
      .online {
        background-color: #28a745;
      }
      .offline {
        background-color: #dc3545;
      }
    </style>
  </head>
  <body>
    <nav class="navbar navbar-expand-lg navbar-dark bg-dark">
      <div class="container">
        <a class="navbar-brand" href="/">WA Gateway</a>
        <button
          class="navbar-toggler"
          type="button"
          data-bs-toggle="collapse"
          data-bs-target="#navbarNav"
        >
          <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
          <ul class="navbar-nav me-auto">
            <li class="nav-item">
              <a class="nav-link active" href="/">Dashboard</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/documentation">API Docs</a>
            </li>
            <li class="nav-item">
              <a class="nav-link" href="/settings">Settings</a>
            </li>
          </ul>
        </div>
      </div>
    </nav>

    <div class="container py-4">
      <div class="d-flex justify-content-between align-items-center mb-4">
        <h1>WhatsApp Sessions</h1>
        <a href="/create-session" class="btn btn-primary">
          <i class="bi bi-plus-circle"></i> Create New Session
        </a>
      </div>

      <div class="row" id="sessions-container">
        <!-- Sessions will be loaded here -->
        <div class="col-12 text-center py-5" id="loading-indicator">
          <div class="spinner-border text-primary" role="status">
            <span class="visually-hidden">Loading...</span>
          </div>
          <p class="mt-2">Loading sessions...</p>
        </div>
      </div>
    </div>

    <!-- Delete Session Modal -->
    <div class="modal fade" id="deleteSessionModal" tabindex="-1">
      <div class="modal-dialog">
        <div class="modal-content">
          <div class="modal-header">
            <h5 class="modal-title">Delete Session</h5>
            <button
              type="button"
              class="btn-close"
              data-bs-dismiss="modal"
              aria-label="Close"
            ></button>
          </div>
          <div class="modal-body">
            <p>Are you sure you want to delete this session? This action cannot be undone.</p>
          </div>
          <div class="modal-footer">
            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
            <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
          </div>
        </div>
      </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      let deleteSessionId = null;

      // Load all sessions
      async function loadSessions() {
        try {
          const response = await fetch("/api/sessions");
          const data = await response.json();

          if (data.success) {
            const sessionsContainer = document.getElementById("sessions-container");
            const loadingIndicator = document.getElementById("loading-indicator");

            if (data.data.length === 0) {
              sessionsContainer.innerHTML = `
                            <div class="col-12 text-center py-5">
                                <i class="bi bi-whatsapp text-muted" style="font-size: 4rem;"></i>
                                <h3 class="mt-3">No WhatsApp Sessions Yet</h3>
                                <p>Click "Create New Session" to connect a WhatsApp account.</p>
                            </div>
                        `;
            } else {
              loadingIndicator.remove();
              renderSessions(data.data);
            }
          }
        } catch (error) {
          console.error("Error loading sessions:", error);
        }
      }

      // Render sessions list
      function renderSessions(sessions) {
        const container = document.getElementById("sessions-container");
        container.innerHTML = "";

        sessions.forEach((session) => {
          const card = document.createElement("div");
          card.className = "col-md-4 mb-4";
          card.innerHTML = `
                    <div class="card session-card h-100">
                        <div class="card-body">
                            <div class="d-flex justify-content-between align-items-center mb-3">
                                <h5 class="card-title m-0">
                                    <span class="online-indicator ${
                                      session.connected ? "online" : "offline"
                                    }"></span>
                                    ${session.id}
                                </h5>
                                <span class="badge ${
                                  session.connected ? "bg-success" : "bg-danger"
                                }">
                                    ${session.connected ? "Online" : "Offline"}
                                </span>
                            </div>
                            
                            <p class="card-text">
                                ${
                                  session.user
                                    ? `
                                    <strong>Phone:</strong> ${session.user.id.split("@")[0]}<br>
                                    <strong>Name:</strong> ${session.user.name || "Not available"}
                                `
                                    : "Not connected"
                                }
                            </p>
                        </div>
                        <div class="card-footer bg-transparent">
                            <div class="d-flex justify-content-between">
                                <a href="/session/${session.id}" class="btn btn-sm btn-primary">
                                    <i class="bi bi-eye"></i> Details
                                </a>
                                <div>
                                    <button class="btn btn-sm btn-warning logout-btn" data-id="${
                                      session.id
                                    }">
                                        <i class="bi bi-box-arrow-right"></i> Logout
                                    </button>
                                    <button class="btn btn-sm btn-danger delete-btn" data-id="${
                                      session.id
                                    }">
                                        <i class="bi bi-trash"></i> Delete
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
          container.appendChild(card);
        });

        // Add event listeners for buttons
        document.querySelectorAll(".logout-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            logoutSession(this.getAttribute("data-id"));
          });
        });

        document.querySelectorAll(".delete-btn").forEach((btn) => {
          btn.addEventListener("click", function () {
            deleteSessionId = this.getAttribute("data-id");
            const deleteModal = new bootstrap.Modal(document.getElementById("deleteSessionModal"));
            deleteModal.show();
          });
        });
      }

      // Logout session
      async function logoutSession(sessionId) {
        try {
          const response = await fetch(`/api/sessions/${sessionId}/logout`, {
            method: "POST",
          });

          const data = await response.json();
          if (data.success) {
            loadSessions();
          }
        } catch (error) {
          console.error("Error logging out session:", error);
        }
      }

      // Delete session
      async function deleteSession(sessionId) {
        try {
          const response = await fetch(`/api/sessions/${sessionId}`, {
            method: "DELETE",
          });

          const data = await response.json();
          if (data.success) {
            loadSessions();
          }
        } catch (error) {
          console.error("Error deleting session:", error);
        }
      }

      // Socket.IO event listeners
      socket.on("session.update", function (data) {
        loadSessions();
      });

      // Document ready
      document.addEventListener("DOMContentLoaded", function () {
        loadSessions();

        // Delete confirmation
        document.getElementById("confirmDeleteBtn").addEventListener("click", function () {
          if (deleteSessionId) {
            deleteSession(deleteSessionId);
            const deleteModal = bootstrap.Modal.getInstance(
              document.getElementById("deleteSessionModal")
            );
            deleteModal.hide();
          }
        });
      });
    </script>
  </body>
</html>
